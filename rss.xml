<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>RightOne</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 02 May 2017 13:28:04 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>LinkedList源码剖析</title>
      <link>http://yoursite.com/posts/43130/</link>
      <guid>http://yoursite.com/posts/43130/</guid>
      <pubDate>Tue, 02 May 2017 13:28:55 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;LinkedList简介&quot;&gt;&lt;a href=&quot;#LinkedList简介&quot; class=&quot;headerlink&quot; title=&quot;LinkedList简介&quot;&gt;&lt;/a&gt;LinkedList简介&lt;/h2&gt;&lt;p&gt;LinkedList是基于双向循环链表（从源码中可以很容易看
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="LinkedList简介"><a href="#LinkedList简介" class="headerlink" title="LinkedList简介"></a>LinkedList简介</h2><p>LinkedList是基于双向循环链表（从源码中可以很容易看出）实现的，除了可以当作链表来操作外，它还可以当作栈，队列和双端队列来使用。</p>
<p>LinkedList同样是非线程安全的，只在单线程下适合使用。</p>
<p>LinkedList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了Cloneable接口，能被克隆。</p>
<h2 id="LinkedList源码剖析"><a href="#LinkedList源码剖析" class="headerlink" title="LinkedList源码剖析"></a>LinkedList源码剖析</h2><p>LinkedList的源码如下（加入了比较详细的注释）</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.util;    </div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> LinkedList&lt;E&gt;    </div><div class="line">    <span class="keyword">extends</span> AbstractSequentialList&lt;E&gt;    </div><div class="line">    <span class="keyword">implements</span> List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable    </div><div class="line">&#123;    </div><div class="line">    <span class="comment">// 链表的表头，表头不包含任何数据。Entry是个链表类数据结构。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;E&gt; header = <span class="keyword">new</span> Entry&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);    </div><div class="line">   </div><div class="line">    <span class="comment">// LinkedList中元素个数    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> <span class="keyword">size</span> = <span class="number">0</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// 默认构造函数：创建一个空的链表    </span></div><div class="line">    <span class="keyword">public</span> LinkedList() &#123;    </div><div class="line">        header.<span class="keyword">next</span> = header.<span class="keyword">previous</span> = header;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 包含“集合”的构造函数:创建一个包含“集合”的LinkedList    </span></div><div class="line">    <span class="keyword">public</span> LinkedList(Collection&lt;? <span class="keyword">extends</span> E&gt; c) &#123;    </div><div class="line">        <span class="keyword">this</span>();    </div><div class="line">        addAll(c);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 获取LinkedList的第一个元素    </span></div><div class="line">    <span class="keyword">public</span> E getFirst() &#123;    </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">size</span>==<span class="number">0</span>)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </div><div class="line">   </div><div class="line">        <span class="comment">// 链表的表头header中不包含数据。    </span></div><div class="line">        <span class="comment">// 这里返回header所指下一个节点所包含的数据。    </span></div><div class="line">        <span class="keyword">return</span> header.<span class="keyword">next</span>.element;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 获取LinkedList的最后一个元素    </span></div><div class="line">    <span class="keyword">public</span> E getLast()  &#123;    </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">size</span>==<span class="number">0</span>)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </div><div class="line">   </div><div class="line">        <span class="comment">// 由于LinkedList是双向链表；而表头header不包含数据。    </span></div><div class="line">        <span class="comment">// 因而，这里返回表头header的前一个节点所包含的数据。    </span></div><div class="line">        <span class="keyword">return</span> header.<span class="keyword">previous</span>.element;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除LinkedList的第一个元素    </span></div><div class="line">    <span class="keyword">public</span> E removeFirst() &#123;    </div><div class="line">        <span class="keyword">return</span> remove(header.<span class="keyword">next</span>);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除LinkedList的最后一个元素    </span></div><div class="line">    <span class="keyword">public</span> E removeLast() &#123;    </div><div class="line">        <span class="keyword">return</span> remove(header.<span class="keyword">previous</span>);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将元素添加到LinkedList的起始位置    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addFirst(E e) &#123;    </div><div class="line">        addBefore(e, header.<span class="keyword">next</span>);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将元素添加到LinkedList的结束位置    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addLast(E e) &#123;    </div><div class="line">        addBefore(e, header);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 判断LinkedList是否包含元素(o)    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> contains(Object o) &#123;    </div><div class="line">        <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回LinkedList的大小    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">size</span>() &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">size</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将元素(E)添加到LinkedList中    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> add(E e) &#123;    </div><div class="line">        <span class="comment">// 将节点(节点数据是e)添加到表头(header)之前。    </span></div><div class="line">        <span class="comment">// 即，将节点添加到双向链表的末端。    </span></div><div class="line">        addBefore(e, header);    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 从LinkedList中删除元素(o)    </span></div><div class="line">    <span class="comment">// 从链表开始查找，如存在元素(o)则删除该元素并返回true；    </span></div><div class="line">    <span class="comment">// 否则，返回false。    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> remove(Object o) &#123;    </div><div class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="comment">// 若o为null的删除情况    </span></div><div class="line">            <span class="keyword">for</span> (Entry&lt;E&gt; e = header.<span class="keyword">next</span>; e != header; e = e.<span class="keyword">next</span>) &#123;    </div><div class="line">                <span class="keyword">if</span> (e.element==<span class="keyword">null</span>) &#123;    </div><div class="line">                    remove(e);    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">        &#125; <span class="keyword">else</span> &#123;    </div><div class="line">            <span class="comment">// 若o不为null的删除情况    </span></div><div class="line">            <span class="keyword">for</span> (Entry&lt;E&gt; e = header.<span class="keyword">next</span>; e != header; e = e.<span class="keyword">next</span>) &#123;    </div><div class="line">                <span class="keyword">if</span> (o.equals(e.element)) &#123;    </div><div class="line">                    remove(e);    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将“集合(c)”添加到LinkedList中。    </span></div><div class="line">    <span class="comment">// 实际上，是从双向链表的末尾开始，将“集合(c)”添加到双向链表中。    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> addAll(Collection&lt;? <span class="keyword">extends</span> E&gt; c) &#123;    </div><div class="line">        <span class="keyword">return</span> addAll(<span class="keyword">size</span>, c);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 从双向链表的index开始，将“集合(c)”添加到双向链表中。    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> addAll(<span class="keyword">int</span> index, Collection&lt;? <span class="keyword">extends</span> E&gt; c) &#123;    </div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">size</span>)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+    </div><div class="line">                                                <span class="string">", Size: "</span>+<span class="keyword">size</span>);    </div><div class="line">        Object[] a = c.toArray();    </div><div class="line">        <span class="comment">// 获取集合的长度    </span></div><div class="line">        <span class="keyword">int</span> numNew = a.length;    </div><div class="line">        <span class="keyword">if</span> (numNew==<span class="number">0</span>)    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        modCount++;    </div><div class="line">   </div><div class="line">        <span class="comment">// 设置“当前要插入节点的后一个节点”    </span></div><div class="line">        Entry&lt;E&gt; successor = (index==<span class="keyword">size</span> ? header : entry(index));    </div><div class="line">        <span class="comment">// 设置“当前要插入节点的前一个节点”    </span></div><div class="line">        Entry&lt;E&gt; predecessor = successor.<span class="keyword">previous</span>;    </div><div class="line">        <span class="comment">// 将集合(c)全部插入双向链表中    </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numNew; i++) &#123;    </div><div class="line">            Entry&lt;E&gt; e = <span class="keyword">new</span> Entry&lt;E&gt;((E)a[i], successor, predecessor);    </div><div class="line">            predecessor.<span class="keyword">next</span> = e;    </div><div class="line">            predecessor = e;    </div><div class="line">        &#125;    </div><div class="line">        successor.<span class="keyword">previous</span> = predecessor;    </div><div class="line">   </div><div class="line">        <span class="comment">// 调整LinkedList的实际大小    </span></div><div class="line">        <span class="keyword">size</span> += numNew;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 清空双向链表    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> clear() &#123;    </div><div class="line">        Entry&lt;E&gt; e = header.<span class="keyword">next</span>;    </div><div class="line">        <span class="comment">// 从表头开始，逐个向后遍历；对遍历到的节点执行一下操作：    </span></div><div class="line">        <span class="comment">// (01) 设置前一个节点为null     </span></div><div class="line">        <span class="comment">// (02) 设置当前节点的内容为null     </span></div><div class="line">        <span class="comment">// (03) 设置后一个节点为“新的当前节点”    </span></div><div class="line">        <span class="keyword">while</span> (e != header) &#123;    </div><div class="line">            Entry&lt;E&gt; <span class="keyword">next</span> = e.<span class="keyword">next</span>;    </div><div class="line">            e.<span class="keyword">next</span> = e.<span class="keyword">previous</span> = <span class="keyword">null</span>;    </div><div class="line">            e.element = <span class="keyword">null</span>;    </div><div class="line">            e = <span class="keyword">next</span>;    </div><div class="line">        &#125;    </div><div class="line">        header.<span class="keyword">next</span> = header.<span class="keyword">previous</span> = header;    </div><div class="line">        <span class="comment">// 设置大小为0    </span></div><div class="line">        <span class="keyword">size</span> = <span class="number">0</span>;    </div><div class="line">        modCount++;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回LinkedList指定位置的元素    </span></div><div class="line">    <span class="keyword">public</span> E get(<span class="keyword">int</span> index) &#123;    </div><div class="line">        <span class="keyword">return</span> entry(index).element;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 设置index位置对应的节点的值为element    </span></div><div class="line">    <span class="keyword">public</span> E set(<span class="keyword">int</span> index, E element) &#123;    </div><div class="line">        Entry&lt;E&gt; e = entry(index);    </div><div class="line">        E oldVal = e.element;    </div><div class="line">        e.element = element;    </div><div class="line">        <span class="keyword">return</span> oldVal;    </div><div class="line">    &#125;    </div><div class="line">     </div><div class="line">    <span class="comment">// 在index前添加节点，且节点的值为element    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> add(<span class="keyword">int</span> index, E element) &#123;    </div><div class="line">        addBefore(element, (index==<span class="keyword">size</span> ? header : entry(index)));    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除index位置的节点    </span></div><div class="line">    <span class="keyword">public</span> E remove(<span class="keyword">int</span> index) &#123;    </div><div class="line">        <span class="keyword">return</span> remove(entry(index));    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 获取双向链表中指定位置的节点    </span></div><div class="line">    <span class="keyword">private</span> Entry&lt;E&gt; entry(<span class="keyword">int</span> index) &#123;    </div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">size</span>)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+    </div><div class="line">                                                <span class="string">", Size: "</span>+<span class="keyword">size</span>);    </div><div class="line">        Entry&lt;E&gt; e = header;    </div><div class="line">        <span class="comment">// 获取index处的节点。    </span></div><div class="line">        <span class="comment">// 若index &lt; 双向链表长度的1/2,则从前先后查找;    </span></div><div class="line">        <span class="comment">// 否则，从后向前查找。    </span></div><div class="line">        <span class="keyword">if</span> (index &lt; (<span class="keyword">size</span> &gt;&gt; <span class="number">1</span>)) &#123;    </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++)    </div><div class="line">                e = e.<span class="keyword">next</span>;    </div><div class="line">        &#125; <span class="keyword">else</span> &#123;    </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">size</span>; i &gt; index; i--)    </div><div class="line">                e = e.<span class="keyword">previous</span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> e;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 从前向后查找，返回“值为对象(o)的节点对应的索引”    </span></div><div class="line">    <span class="comment">// 不存在就返回-1    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> indexOf(Object o) &#123;    </div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;    </div><div class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">for</span> (Entry e = header.<span class="keyword">next</span>; e != header; e = e.<span class="keyword">next</span>) &#123;    </div><div class="line">                <span class="keyword">if</span> (e.element==<span class="keyword">null</span>)    </div><div class="line">                    <span class="keyword">return</span> index;    </div><div class="line">                index++;    </div><div class="line">            &#125;    </div><div class="line">        &#125; <span class="keyword">else</span> &#123;    </div><div class="line">            <span class="keyword">for</span> (Entry e = header.<span class="keyword">next</span>; e != header; e = e.<span class="keyword">next</span>) &#123;    </div><div class="line">                <span class="keyword">if</span> (o.equals(e.element))    </div><div class="line">                    <span class="keyword">return</span> index;    </div><div class="line">                index++;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 从后向前查找，返回“值为对象(o)的节点对应的索引”    </span></div><div class="line">    <span class="comment">// 不存在就返回-1    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> lastIndexOf(Object o) &#123;    </div><div class="line">        <span class="keyword">int</span> index = <span class="keyword">size</span>;    </div><div class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">for</span> (Entry e = header.<span class="keyword">previous</span>; e != header; e = e.<span class="keyword">previous</span>) &#123;    </div><div class="line">                index--;    </div><div class="line">                <span class="keyword">if</span> (e.element==<span class="keyword">null</span>)    </div><div class="line">                    <span class="keyword">return</span> index;    </div><div class="line">            &#125;    </div><div class="line">        &#125; <span class="keyword">else</span> &#123;    </div><div class="line">            <span class="keyword">for</span> (Entry e = header.<span class="keyword">previous</span>; e != header; e = e.<span class="keyword">previous</span>) &#123;    </div><div class="line">                index--;    </div><div class="line">                <span class="keyword">if</span> (o.equals(e.element))    </div><div class="line">                    <span class="keyword">return</span> index;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回第一个节点    </span></div><div class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null    </span></div><div class="line">    <span class="keyword">public</span> E peek() &#123;    </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">size</span>==<span class="number">0</span>)    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">return</span> getFirst();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回第一个节点    </span></div><div class="line">    <span class="comment">// 若LinkedList的大小为0,则抛出异常    </span></div><div class="line">    <span class="keyword">public</span> E element() &#123;    </div><div class="line">        <span class="keyword">return</span> getFirst();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除并返回第一个节点    </span></div><div class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null    </span></div><div class="line">    <span class="keyword">public</span> E poll() &#123;    </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">size</span>==<span class="number">0</span>)    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">return</span> removeFirst();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将e添加双向链表末尾    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> offer(E e) &#123;    </div><div class="line">        <span class="keyword">return</span> add(e);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将e添加双向链表开头    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> offerFirst(E e) &#123;    </div><div class="line">        addFirst(e);    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将e添加双向链表末尾    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> offerLast(E e) &#123;    </div><div class="line">        addLast(e);    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回第一个节点    </span></div><div class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null    </span></div><div class="line">    <span class="keyword">public</span> E peekFirst() &#123;    </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">size</span>==<span class="number">0</span>)    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">return</span> getFirst();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回最后一个节点    </span></div><div class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null    </span></div><div class="line">    <span class="keyword">public</span> E peekLast() &#123;    </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">size</span>==<span class="number">0</span>)    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">return</span> getLast();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除并返回第一个节点    </span></div><div class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null    </span></div><div class="line">    <span class="keyword">public</span> E pollFirst() &#123;    </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">size</span>==<span class="number">0</span>)    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">return</span> removeFirst();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除并返回最后一个节点    </span></div><div class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null    </span></div><div class="line">    <span class="keyword">public</span> E pollLast() &#123;    </div><div class="line">        <span class="keyword">if</span> (<span class="keyword">size</span>==<span class="number">0</span>)    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">return</span> removeLast();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将e插入到双向链表开头    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">push</span>(E e) &#123;    </div><div class="line">        addFirst(e);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除并返回第一个节点    </span></div><div class="line">    <span class="keyword">public</span> E <span class="keyword">pop</span>() &#123;    </div><div class="line">        <span class="keyword">return</span> removeFirst();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 从LinkedList开始向后查找，删除第一个值为元素(o)的节点    </span></div><div class="line">    <span class="comment">// 从链表开始查找，如存在节点的值为元素(o)的节点，则删除该节点    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> removeFirstOccurrence(Object o) &#123;    </div><div class="line">        <span class="keyword">return</span> remove(o);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 从LinkedList末尾向前查找，删除第一个值为元素(o)的节点    </span></div><div class="line">    <span class="comment">// 从链表开始查找，如存在节点的值为元素(o)的节点，则删除该节点    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> removeLastOccurrence(Object o) &#123;    </div><div class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">for</span> (Entry&lt;E&gt; e = header.<span class="keyword">previous</span>; e != header; e = e.<span class="keyword">previous</span>) &#123;    </div><div class="line">                <span class="keyword">if</span> (e.element==<span class="keyword">null</span>) &#123;    </div><div class="line">                    remove(e);    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">        &#125; <span class="keyword">else</span> &#123;    </div><div class="line">            <span class="keyword">for</span> (Entry&lt;E&gt; e = header.<span class="keyword">previous</span>; e != header; e = e.<span class="keyword">previous</span>) &#123;    </div><div class="line">                <span class="keyword">if</span> (o.equals(e.element)) &#123;    </div><div class="line">                    remove(e);    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回“index到末尾的全部节点”对应的ListIterator对象(List迭代器)    </span></div><div class="line">    <span class="keyword">public</span> ListIterator&lt;E&gt; listIterator(<span class="keyword">int</span> index) &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// List迭代器    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">class</span> ListItr <span class="keyword">implements</span> ListIterator&lt;E&gt; &#123;    </div><div class="line">        <span class="comment">// 上一次返回的节点    </span></div><div class="line">        <span class="keyword">private</span> Entry&lt;E&gt; lastReturned = header;    </div><div class="line">        <span class="comment">// 下一个节点    </span></div><div class="line">        <span class="keyword">private</span> Entry&lt;E&gt; <span class="keyword">next</span>;    </div><div class="line">        <span class="comment">// 下一个节点对应的索引值    </span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> nextIndex;    </div><div class="line">        <span class="comment">// 期望的改变计数。用来实现fail-fast机制。    </span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;    </div><div class="line">   </div><div class="line">        <span class="comment">// 构造函数。    </span></div><div class="line">        <span class="comment">// 从index位置开始进行迭代    </span></div><div class="line">        ListItr(<span class="keyword">int</span> index) &#123;    </div><div class="line">            <span class="comment">// index的有效性处理    </span></div><div class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">size</span>)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+ <span class="string">", Size: "</span>+<span class="keyword">size</span>);    </div><div class="line">            <span class="comment">// 若 “index 小于 ‘双向链表长度的一半’”，则从第一个元素开始往后查找；    </span></div><div class="line">            <span class="comment">// 否则，从最后一个元素往前查找。    </span></div><div class="line">            <span class="keyword">if</span> (index &lt; (<span class="keyword">size</span> &gt;&gt; <span class="number">1</span>)) &#123;    </div><div class="line">                <span class="keyword">next</span> = header.<span class="keyword">next</span>;    </div><div class="line">                <span class="keyword">for</span> (nextIndex=<span class="number">0</span>; nextIndex&lt;index; nextIndex++)    </div><div class="line">                    <span class="keyword">next</span> = <span class="keyword">next</span>.<span class="keyword">next</span>;    </div><div class="line">            &#125; <span class="keyword">else</span> &#123;    </div><div class="line">                <span class="keyword">next</span> = header;    </div><div class="line">                <span class="keyword">for</span> (nextIndex=<span class="keyword">size</span>; nextIndex&gt;index; nextIndex--)    </div><div class="line">                    <span class="keyword">next</span> = <span class="keyword">next</span>.<span class="keyword">previous</span>;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 是否存在下一个元素    </span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> hasNext() &#123;    </div><div class="line">            <span class="comment">// 通过元素索引是否等于“双向链表大小”来判断是否达到最后。    </span></div><div class="line">            <span class="keyword">return</span> nextIndex != <span class="keyword">size</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 获取下一个元素    </span></div><div class="line">        <span class="keyword">public</span> E <span class="keyword">next</span>() &#123;    </div><div class="line">            checkForComodification();    </div><div class="line">            <span class="keyword">if</span> (nextIndex == <span class="keyword">size</span>)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </div><div class="line">   </div><div class="line">            lastReturned = <span class="keyword">next</span>;    </div><div class="line">            <span class="comment">// next指向链表的下一个元素    </span></div><div class="line">            <span class="keyword">next</span> = <span class="keyword">next</span>.<span class="keyword">next</span>;    </div><div class="line">            nextIndex++;    </div><div class="line">            <span class="keyword">return</span> lastReturned.element;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 是否存在上一个元素    </span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> hasPrevious() &#123;    </div><div class="line">            <span class="comment">// 通过元素索引是否等于0，来判断是否达到开头。    </span></div><div class="line">            <span class="keyword">return</span> nextIndex != <span class="number">0</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 获取上一个元素    </span></div><div class="line">        <span class="keyword">public</span> E <span class="keyword">previous</span>() &#123;    </div><div class="line">            <span class="keyword">if</span> (nextIndex == <span class="number">0</span>)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </div><div class="line">   </div><div class="line">            <span class="comment">// next指向链表的上一个元素    </span></div><div class="line">            lastReturned = <span class="keyword">next</span> = <span class="keyword">next</span>.<span class="keyword">previous</span>;    </div><div class="line">            nextIndex--;    </div><div class="line">            checkForComodification();    </div><div class="line">            <span class="keyword">return</span> lastReturned.element;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 获取下一个元素的索引    </span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> nextIndex() &#123;    </div><div class="line">            <span class="keyword">return</span> nextIndex;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 获取上一个元素的索引    </span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> previousIndex() &#123;    </div><div class="line">            <span class="keyword">return</span> nextIndex-<span class="number">1</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 删除当前元素。    </span></div><div class="line">        <span class="comment">// 删除双向链表中的当前节点    </span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> remove() &#123;    </div><div class="line">            checkForComodification();    </div><div class="line">            Entry&lt;E&gt; lastNext = lastReturned.<span class="keyword">next</span>;    </div><div class="line">            <span class="keyword">try</span> &#123;    </div><div class="line">                LinkedList.<span class="keyword">this</span>.remove(lastReturned);    </div><div class="line">            &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();    </div><div class="line">            &#125;    </div><div class="line">            <span class="keyword">if</span> (<span class="keyword">next</span>==lastReturned)    </div><div class="line">                <span class="keyword">next</span> = lastNext;    </div><div class="line">            <span class="keyword">else</span>   </div><div class="line">                nextIndex--;    </div><div class="line">            lastReturned = header;    </div><div class="line">            expectedModCount++;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 设置当前节点为e    </span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> set(E e) &#123;    </div><div class="line">            <span class="keyword">if</span> (lastReturned == header)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();    </div><div class="line">            checkForComodification();    </div><div class="line">            lastReturned.element = e;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 将e添加到当前节点的前面    </span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> add(E e) &#123;    </div><div class="line">            checkForComodification();    </div><div class="line">            lastReturned = header;    </div><div class="line">            addBefore(e, <span class="keyword">next</span>);    </div><div class="line">            nextIndex++;    </div><div class="line">            expectedModCount++;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 判断 “modCount和expectedModCount是否相等”，依次来实现fail-fast机制。    </span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">void</span> checkForComodification() &#123;    </div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 双向链表的节点所对应的数据结构。    </span></div><div class="line">    <span class="comment">// 包含3部分：上一节点，下一节点，当前节点值。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Entry&lt;E&gt; &#123;    </div><div class="line">        <span class="comment">// 当前节点所包含的值    </span></div><div class="line">        E element;    </div><div class="line">        <span class="comment">// 下一个节点    </span></div><div class="line">        Entry&lt;E&gt; <span class="keyword">next</span>;    </div><div class="line">        <span class="comment">// 上一个节点    </span></div><div class="line">        Entry&lt;E&gt; <span class="keyword">previous</span>;    </div><div class="line">   </div><div class="line">        <span class="comment">/**   </span></div><div class="line">         * 链表节点的构造函数。   </div><div class="line">         * 参数说明：   </div><div class="line">         *   element  —— 节点所包含的数据   </div><div class="line">         *   next      —— 下一个节点   </div><div class="line">         *   previous —— 上一个节点   </div><div class="line">         */   </div><div class="line">        Entry(E element, Entry&lt;E&gt; <span class="keyword">next</span>, Entry&lt;E&gt; <span class="keyword">previous</span>) &#123;    </div><div class="line">            <span class="keyword">this</span>.element = element;    </div><div class="line">            <span class="keyword">this</span>.<span class="keyword">next</span> = <span class="keyword">next</span>;    </div><div class="line">            <span class="keyword">this</span>.<span class="keyword">previous</span> = <span class="keyword">previous</span>;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将节点(节点数据是e)添加到entry节点之前。    </span></div><div class="line">    <span class="keyword">private</span> Entry&lt;E&gt; addBefore(E e, Entry&lt;E&gt; entry) &#123;    </div><div class="line">        <span class="comment">// 新建节点newEntry，将newEntry插入到节点e之前；并且设置newEntry的数据是e    </span></div><div class="line">        Entry&lt;E&gt; newEntry = <span class="keyword">new</span> Entry&lt;E&gt;(e, entry, entry.<span class="keyword">previous</span>);    </div><div class="line">        newEntry.<span class="keyword">previous</span>.<span class="keyword">next</span> = newEntry;    </div><div class="line">        newEntry.<span class="keyword">next</span>.<span class="keyword">previous</span> = newEntry;    </div><div class="line">        <span class="comment">// 修改LinkedList大小    </span></div><div class="line">        <span class="keyword">size</span>++;    </div><div class="line">        <span class="comment">// 修改LinkedList的修改统计数：用来实现fail-fast机制。    </span></div><div class="line">        modCount++;    </div><div class="line">        <span class="keyword">return</span> newEntry;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将节点从链表中删除    </span></div><div class="line">    <span class="keyword">private</span> E remove(Entry&lt;E&gt; e) &#123;    </div><div class="line">        <span class="keyword">if</span> (e == header)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </div><div class="line">   </div><div class="line">        E result = e.element;    </div><div class="line">        e.<span class="keyword">previous</span>.<span class="keyword">next</span> = e.<span class="keyword">next</span>;    </div><div class="line">        e.<span class="keyword">next</span>.<span class="keyword">previous</span> = e.<span class="keyword">previous</span>;    </div><div class="line">        e.<span class="keyword">next</span> = e.<span class="keyword">previous</span> = <span class="keyword">null</span>;    </div><div class="line">        e.element = <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">size</span>--;    </div><div class="line">        modCount++;    </div><div class="line">        <span class="keyword">return</span> result;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 反向迭代器    </span></div><div class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; descendingIterator() &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DescendingIterator();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 反向迭代器实现类。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">class</span> DescendingIterator <span class="keyword">implements</span> Iterator &#123;    </div><div class="line">        <span class="keyword">final</span> ListItr itr = <span class="keyword">new</span> ListItr(<span class="keyword">size</span>());    </div><div class="line">        <span class="comment">// 反向迭代器是否下一个元素。    </span></div><div class="line">        <span class="comment">// 实际上是判断双向链表的当前节点是否达到开头    </span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> hasNext() &#123;    </div><div class="line">            <span class="keyword">return</span> itr.hasPrevious();    </div><div class="line">        &#125;    </div><div class="line">        <span class="comment">// 反向迭代器获取下一个元素。    </span></div><div class="line">        <span class="comment">// 实际上是获取双向链表的前一个节点    </span></div><div class="line">        <span class="keyword">public</span> E <span class="keyword">next</span>() &#123;    </div><div class="line">            <span class="keyword">return</span> itr.<span class="keyword">previous</span>();    </div><div class="line">        &#125;    </div><div class="line">        <span class="comment">// 删除当前节点    </span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> remove() &#123;    </div><div class="line">            itr.remove();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="comment">// 返回LinkedList的Object[]数组    </span></div><div class="line">    <span class="keyword">public</span> Object[] toArray() &#123;    </div><div class="line">    <span class="comment">// 新建Object[]数组    </span></div><div class="line">    Object[] result = <span class="keyword">new</span> Object[<span class="keyword">size</span>];    </div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;    </div><div class="line">        <span class="comment">// 将链表中所有节点的数据都添加到Object[]数组中    </span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;E&gt; e = header.<span class="keyword">next</span>; e != header; e = e.<span class="keyword">next</span>)    </div><div class="line">            result[i++] = e.element;    </div><div class="line">    <span class="keyword">return</span> result;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回LinkedList的模板数组。所谓模板数组，即可以将T设为任意的数据类型    </span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;    </div><div class="line">        <span class="comment">// 若数组a的大小 &lt; LinkedList的元素个数(意味着数组a不能容纳LinkedList中全部元素)    </span></div><div class="line">        <span class="comment">// 则新建一个T[]数组，T[]的大小为LinkedList大小，并将该T[]赋值给a。    </span></div><div class="line">        <span class="keyword">if</span> (a.length &lt; <span class="keyword">size</span>)    </div><div class="line">            a = (T[])java.lang.reflect.Array.newInstance(    </div><div class="line">                                a.getClass().getComponentType(), <span class="keyword">size</span>);    </div><div class="line">        <span class="comment">// 将链表中所有节点的数据都添加到数组a中    </span></div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;    </div><div class="line">        Object[] result = a;    </div><div class="line">        <span class="keyword">for</span> (Entry&lt;E&gt; e = header.<span class="keyword">next</span>; e != header; e = e.<span class="keyword">next</span>)    </div><div class="line">            result[i++] = e.element;    </div><div class="line">   </div><div class="line">        <span class="keyword">if</span> (a.length &gt; <span class="keyword">size</span>)    </div><div class="line">            a[<span class="keyword">size</span>] = <span class="keyword">null</span>;    </div><div class="line">   </div><div class="line">        <span class="keyword">return</span> a;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="comment">// 克隆函数。返回LinkedList的克隆对象。    </span></div><div class="line">    <span class="keyword">public</span> Object clone() &#123;    </div><div class="line">        LinkedList&lt;E&gt; clone = <span class="keyword">null</span>;    </div><div class="line">        <span class="comment">// 克隆一个LinkedList克隆对象    </span></div><div class="line">        <span class="keyword">try</span> &#123;    </div><div class="line">            clone = (LinkedList&lt;E&gt;) <span class="keyword">super</span>.clone();    </div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 新建LinkedList表头节点    </span></div><div class="line">        clone.header = <span class="keyword">new</span> Entry&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);    </div><div class="line">        clone.header.<span class="keyword">next</span> = clone.header.<span class="keyword">previous</span> = clone.header;    </div><div class="line">        clone.<span class="keyword">size</span> = <span class="number">0</span>;    </div><div class="line">        clone.modCount = <span class="number">0</span>;    </div><div class="line">   </div><div class="line">        <span class="comment">// 将链表中所有节点的数据都添加到克隆对象中    </span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;E&gt; e = header.<span class="keyword">next</span>; e != header; e = e.<span class="keyword">next</span>)    </div><div class="line">            clone.add(e.element);    </div><div class="line">   </div><div class="line">        <span class="keyword">return</span> clone;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// java.io.Serializable的写入函数    </span></div><div class="line">    <span class="comment">// 将LinkedList的“容量，所有的元素值”都写入到输出流中    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream s)    </div><div class="line">        <span class="keyword">throws</span> java.io.IOException &#123;    </div><div class="line">        <span class="comment">// Write out any hidden serialization magic    </span></div><div class="line">        s.defaultWriteObject();    </div><div class="line">   </div><div class="line">        <span class="comment">// 写入“容量”    </span></div><div class="line">        s.writeInt(<span class="keyword">size</span>);    </div><div class="line">   </div><div class="line">        <span class="comment">// 将链表中所有节点的数据都写入到输出流中    </span></div><div class="line">        <span class="keyword">for</span> (Entry e = header.<span class="keyword">next</span>; e != header; e = e.<span class="keyword">next</span>)    </div><div class="line">            s.writeObject(e.element);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式反向读出    </span></div><div class="line">    <span class="comment">// 先将LinkedList的“容量”读出，然后将“所有的元素值”读出    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)    </div><div class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;    </div><div class="line">        <span class="comment">// Read in any hidden serialization magic    </span></div><div class="line">        s.defaultReadObject();    </div><div class="line">   </div><div class="line">        <span class="comment">// 从输入流中读取“容量”    </span></div><div class="line">        <span class="keyword">int</span> <span class="keyword">size</span> = s.readInt();    </div><div class="line">   </div><div class="line">        <span class="comment">// 新建链表表头节点    </span></div><div class="line">        header = <span class="keyword">new</span> Entry&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);    </div><div class="line">        header.<span class="keyword">next</span> = header.<span class="keyword">previous</span> = header;    </div><div class="line">   </div><div class="line">        <span class="comment">// 从输入流中将“所有的元素值”并逐个添加到链表中    </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">size</span>; i++)    </div><div class="line">            addBefore((E)s.readObject(), header);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##几点总结</p>
<p>关于LinkedList的源码，给出几点比较重要的总结：</p>
<p>1、从源码中很明显可以看出，LinkedList的实现是基于双向循环链表的，且头结点中不存放数据，如下图;</p>
<p><img src="http://img.blog.csdn.net/20140629153056171" alt=""></p>
<p>2、注意两个不同的构造方法。无参构造方法直接建立一个仅包含head节点的空链表，包含Collection的构造方法，先调用无参构造方法建立一个空链表，然后将Collection中的数据加入到链表的尾部后面。</p>
<p>3、在查找和删除某元素时，源码中都划分为该元素为null和不为null两种情况来处理，LinkedList中允许元素为null。</p>
<p>4、LinkedList是基于链表实现的，因此不存在容量不足的问题，所以这里没有扩容的方法。</p>
<p> 5、注意源码中的Entry<e> entry(int index)方法。该方法返回双向链表中指定位置处的节点，而链表中是没有下标索引的，要指定位置出的元素，就要遍历该链表，从源码的实现中，我们看到这里有一个加速动作。源码中先将index与长度size的一半比较，如果index<size 2，就只从位置0往后遍历到位置index处，而如果index="">size/2，就只从位置size往前遍历到位置index处。这样可以减少一部分不必要的遍历，从而提高一定的效率（实际上效率还是很低）。</size></e></p>
<p> 6、注意链表类对应的数据结构Entry。如下;</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 双向链表的节点所对应的数据结构。    </span></div><div class="line"><span class="comment">// 包含3部分：上一节点，下一节点，当前节点值。    </span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Entry&lt;E&gt; &#123;    </div><div class="line">    <span class="comment">// 当前节点所包含的值    </span></div><div class="line">    E element;    </div><div class="line">    <span class="comment">// 下一个节点    </span></div><div class="line">    Entry&lt;E&gt; <span class="keyword">next</span>;    </div><div class="line">    <span class="comment">// 上一个节点    </span></div><div class="line">    Entry&lt;E&gt; <span class="keyword">previous</span>;    </div><div class="line">  </div><div class="line">    <span class="comment">/**   </span></div><div class="line">     * 链表节点的构造函数。   </div><div class="line">     * 参数说明：   </div><div class="line">     *   element  —— 节点所包含的数据   </div><div class="line">     *   next      —— 下一个节点   </div><div class="line">     *   previous —— 上一个节点   </div><div class="line">     */   </div><div class="line">    Entry(E element, Entry&lt;E&gt; <span class="keyword">next</span>, Entry&lt;E&gt; <span class="keyword">previous</span>) &#123;    </div><div class="line">        <span class="keyword">this</span>.element = element;    </div><div class="line">        <span class="keyword">this</span>.<span class="keyword">next</span> = <span class="keyword">next</span>;    </div><div class="line">        <span class="keyword">this</span>.<span class="keyword">previous</span> = <span class="keyword">previous</span>;    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 7、LinkedList是基于链表实现的，因此插入删除效率高，查找效率低（虽然有一个加速动作）。</p>
<p> 8、要注意源码中还实现了栈和队列的操作方法，因此也可以作为栈、队列和双端队列来使用。</p>
]]></content:encoded>
      
      <comments>http://yoursite.com/posts/43130/#disqus_thread</comments>
    </item>
    
    <item>
      <title>C语言词法分析程序</title>
      <link>http://yoursite.com/posts/58818/</link>
      <guid>http://yoursite.com/posts/58818/</guid>
      <pubDate>Tue, 02 May 2017 11:00:39 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;C语言词法分析程序&quot;&gt;&lt;a href=&quot;#C语言词法分析程序&quot; class=&quot;headerlink&quot; title=&quot;C语言词法分析程序&quot;&gt;&lt;/a&gt;C语言词法分析程序&lt;/h2&gt;&lt;h4 id=&quot;词法分析原理：&quot;&gt;&lt;a href=&quot;#词法分析原理：&quot; class=&quot;he
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="C语言词法分析程序"><a href="#C语言词法分析程序" class="headerlink" title="C语言词法分析程序"></a>C语言词法分析程序</h2><h4 id="词法分析原理："><a href="#词法分析原理：" class="headerlink" title="词法分析原理："></a>词法分析原理：</h4><p>词法分析是作为相对独立的阶段来完成的（对源程序或中间结果从头到尾扫描一次，并作相应的加工处理，生成新的中间结果或目标程序）。在词法分析过程中，编译程序是通过操作系统从外部介质中读取源程序文件中的各个字符的。同时，为正确地识别单词，有时还需进行超前搜索和回退字符等操作。因此，为了提高读盘效率和便于扫描器进行工作，通常可采用缓冲输入的方案，即在内存中设置一个适当大小的输入缓冲区，让操作系统直接将磁盘上的源程序字符串分批送入此缓冲区中，供扫描器进行处理。</p>
<p>词法分析程序的一般设计方案是：</p>
<ol>
<li><p>程序设计语言词法规则⇒正规文法⇒ FA；<br>或：词法规则⇒正规表达式⇒ FA；</p>
</li>
<li><p>NFA确定化⇒ DFA；</p>
</li>
<li><p>DFA最简化；</p>
</li>
<li><p>确定单词符号输出形式；</p>
</li>
<li><p>化简后的DFA＋单词符号输出形式⇒构造词法分析程序。</p>
</li>
</ol>
<p>从设计方案可知，要构造词法分析程序，必须掌握以下三个知识点：文法.<br>正规表达式和FA。</p>
<p><strong>文法与语言的形式定义如下：</strong></p>
<p>一个形式文法 G 是下述元素构成的一个元组(VN ，VT ，P，S )。其中：</p>
<ol>
<li>VT —非空有限的终结符号集，即 Σ；</li>
</ol>
<p>终结符：一个语言不可再分的基本符号。</p>
<ol>
<li>VN—非空有限的非终结符号集；</li>
</ol>
<blockquote>
<p>  非终结符：也称语法变量，用来代表语法范畴。一个非终结符代表一个一定的语法概念，是一个类（集合）记号，而不是一个体记号。</p>
</blockquote>
<ol>
<li><p>S —开始符号/识别符号，S∈ VN ；</p>
</li>
<li><p>P —产生式规则集（或叫规则或生成式或重写规则）；</p>
</li>
</ol>
<blockquote>
<p>  产生式：形如α → β或α ::=<br>  β的表达式，其中α为左部，β为右部。α∈(VT∪VN)+且至少含一个VN；β∈(VT∪VN)*。</p>
</blockquote>
<ol>
<li>VT∪VN =Ф。</li>
</ol>
<p>仅由字母表A={ai=1，2，…，k}上的正规式α所组成的语言称为正规集，记为L(α<br>)。正规集的形式化描述式称为正规式。</p>
<p><strong>字母表Σ上的正规表达式和正规集递归定义如下：</strong></p>
<ol>
<li><p>Σ 中的a是正规表达式，其正规集为{a}；</p>
</li>
<li><p>空串ε是Σ上的正规表达式，其正规集为{ε}；</p>
</li>
<li><p>空集Φ是Σ上的正规表达式，其正规集为Φ ；</p>
</li>
<li><p>如果e1和e2是Σ上的正规表达式，它们所表示的正规集分别为L(e1)与L(e2) ，则：</p>
</li>
</ol>
<p>e1|e2也是Σ上的正规表达式，其正规集为L(e1|e2)=L(e1) ∪L(e2)。</p>
<p>e1e2也是Σ上的正规表达式，其正规集为L(e1e2)=L(e1) L(e2)。</p>
<p>(e1)* 也是Σ上的正规表达式，其正规集为L((e1)* )=L(e1)*。</p>
<p>而<strong>确定有限自动机(DFA)理论定义DFA M=（Q ，Σ ，t ，q0 ，F）。</strong>其中：</p>
<ol>
<li><p>Q —有穷非空状态集；</p>
</li>
<li><p>Σ —有穷输入字母表；</p>
</li>
<li><p>t — 映射Q × Σ → Q(单值映射，下态确定)；</p>
</li>
<li><p>q0 —q0∈Q,称为开始状态(唯一)；</p>
</li>
<li><p>F —非空终止状态集；</p>
</li>
</ol>
<p>非确定有限自动机(NFA M) 定义与DFA M的比较可知：<br>NFA可有多个初态，并可能含ε弧或字符串弧；在NFA中，t是多值的，即t（s,<br>a）无法唯一地确定下一状态。</p>
<p>对于FA，最重要的是给出其映射。可以由状态转换表，状态转换图或者直接给出。</p>
<ol>
<li><p>直接给出：t(q ,a)=q’；</p>
</li>
<li><p>状态转换表：状态为表列，字母为表行；</p>
</li>
</ol>
<p>3.<br>状态转换图：是由一组矢线连接的有限个结点所组成的有向图。每一结点均代表在识别或分析过程中扫描器所处的状态。它是设计和实现扫描器的一种有效工具，是有限自动机的直观图示。下面是标识符的状态图：<br><img src="http://i2.muimg.com/567571/aaae0f83dbe7d4e2.png" alt=""></p>
<p>（正规式与有限自动机的等价性）定义：对任何两个有限的自动机M1和M2，若有L(M1)=L(M2)，则称M1与M2等价。</p>
<p>可通过子集法或造表法求解NFA的等价DFA（NFA的确定化方法）。</p>
<p><strong>NFA的确定化方法算法</strong>（造表法）：</p>
<blockquote>
<ol>
<li><p>画一张具有n+1列的矩阵表P，n =NFA中出现的符号的个数。各应列的名字分别为I，Ia，Ib，IC，…，其中，a，b，c…是NFA中出的所有字符。</p>
<ol>
<li><p>令I = ε－CLOSURE（S0）。S0：NFA的初态集。ε－CLOSURE(S0) = S0∪Sε<br>Sε= {s| 从S0的某一状态出发经过任意条ε弧可达s}</p>
</li>
<li><p>把I填入乘P的I列</p>
</li>
<li><p>计算Ia，Ib，IC，…，并填入相应的列。Ia = ε－CLOSURE(Ja)  Ja = {s | 从I的某一状态出发经过一条a弧可到s}</p>
</li>
</ol>
</li>
<li><p>若J∈{ Ia，Ib，IC，…}未在I列出现，则令I =<br>J。并重复3~5直列所有的J均在I列中出现过。</p>
<ol>
<li><p>把P中的各子集作为状态，并重新命名。</p>
</li>
<li><p>确定终态和初态：</p>
</li>
</ol>
</li>
</ol>
</blockquote>
<p>初态：I列的第一个元素。 终态：含有原NFA任一终态的子集。</p>
<blockquote>
<ol>
<li>画出相应的DFA</li>
</ol>
</blockquote>
<p><strong>正规文法到有穷自动机的转变步骤：</strong></p>
<ol>
<li><p>VT ⇒ Σ；</p>
</li>
<li><p>VN ⇒ Q,其中S⇒q0；</p>
</li>
<li><p>A中增加新状态Z作为终态；</p>
</li>
<li><p>U →aV ⇒ t(U，a)=V；</p>
<p> a∈VT或 a=ε，V∈VN 。</p>
</li>
<li><p>U →a (a∈VT) ⇒ t(U,a)=Z。</p>
</li>
</ol>
<p>  正规表达式到有穷自动机的转变，对于任意的一个正则表达式e，从<img src="http://i4.buimg.com/567571/cd475032b2f9d2ed.png" alt="">开始，按照变换规则，逐步扩弧. 扩结，直到转换图上所有的弧上都是∑中的单个符号为止。对于引入的每一个新状态，应该赋予一个独有的名字。其变换规则如下：</p>
<p>  <img src="http://i4.buimg.com/567571/69e11c49faddf38a.png" alt=""></p>
<p>  对于一个语言来说，如何对其单词进行分类和编码并没有一个原则性的规定，而主要取决于处理上的方便。通常按照语法分析的需要设置，用整数表示。</p>
<p>代码</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Analysis &#123;</div><div class="line">	<span class="keyword">String</span> sourceFile;  <span class="comment">//源文件名</span></div><div class="line">	<span class="keyword">String</span> sentence;  <span class="comment">//程序语句</span></div><div class="line">	</div><div class="line">	<span class="keyword">String</span> <span class="keyword">word</span>=<span class="string">""</span>;   <span class="comment">//分析得到的字符串</span></div><div class="line">	<span class="keyword">String</span> keyWord[] = &#123; <span class="string">"if"</span>, <span class="string">"int"</span>, <span class="string">"for"</span>, <span class="string">"while"</span>, <span class="string">"do"</span>, <span class="string">"return"</span>, <span class="string">"break"</span>, <span class="string">"continue"</span> &#125;;<span class="comment">// 语句控制关键字</span></div><div class="line">	<span class="keyword">String</span> id[]=<span class="keyword">new</span> <span class="keyword">String</span>[<span class="number">100</span>];</div><div class="line">	<span class="keyword">int</span> idLength=<span class="number">0</span>;<span class="comment">//记录标志符表中存放的标志符的个数</span></div><div class="line">	</div><div class="line">	<span class="keyword">String</span> num[]=<span class="keyword">new</span> <span class="keyword">String</span>[<span class="number">100</span>];</div><div class="line">	<span class="keyword">int</span> numLength=<span class="number">0</span>;<span class="comment">//记录常数表中存放的常数的个数</span></div><div class="line">	</div><div class="line">	<span class="keyword">int</span> <span class="built_in">line</span>=<span class="number">0</span>;<span class="comment">//当前读到的行数</span></div><div class="line">	</div><div class="line">	<span class="comment">//判断是否为数字字符</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> isDigit(<span class="keyword">char</span> ch)&#123;</div><div class="line">		<span class="built_in">if</span>((ch&gt;=<span class="string">'0'</span>)&amp;&amp;(ch&lt;=<span class="string">'9'</span>))</div><div class="line">			<span class="built_in">return</span> true;</div><div class="line">		<span class="built_in">else</span></div><div class="line">			<span class="built_in">return</span> false;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//判断是否为字母字符</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> isLetter(<span class="keyword">char</span> ch)&#123;</div><div class="line">		<span class="built_in">if</span>(((ch&gt;=<span class="string">'A'</span>)&amp;&amp;(ch&lt;=<span class="string">'Z'</span>))||((ch&gt;=<span class="string">'a'</span>)&amp;&amp;(ch&lt;=<span class="string">'z'</span>)))</div><div class="line">			<span class="built_in">return</span> true;</div><div class="line">		<span class="built_in">else</span></div><div class="line">			<span class="built_in">return</span> false;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//判断是否为关键字</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> isKeyword(<span class="keyword">String</span> str)&#123;</div><div class="line">		<span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">		<span class="built_in">for</span>(;i&lt;keyWord.length;i++)&#123;</div><div class="line">			<span class="built_in">if</span>(str.equals(keyWord[i]))        <span class="comment">//是关键字</span></div><div class="line">			&#123;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(关键字："</span>+str+<span class="string">")"</span>);</div><div class="line">				i=keyWord.length;<span class="comment">//结束循环，i等于keyWord.length+1</span></div><div class="line">			&#125;</div><div class="line">		&#125;<span class="comment">//结束循环,i等于keyWord.length</span></div><div class="line">		</div><div class="line">		</div><div class="line">		<span class="built_in">if</span>(i==keyWord.length)&#123;<span class="comment">//普通标志符</span></div><div class="line">			<span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">			<span class="built_in">for</span>(;j&lt;idLength;j++)&#123;<span class="comment">//在标志符表中查找是否有该标志符</span></div><div class="line">				<span class="built_in">if</span>(str.equals(id[j]))<span class="comment">//标志符表中已经有该标志符</span></div><div class="line">				&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(标识符："</span>+str+<span class="string">")"</span>);<span class="comment">//输出该标志符在标志符表中的位置</span></div><div class="line">					j=idLength;<span class="comment">//结束循环，j等于idLength+1</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">if</span>(j==idLength)&#123;<span class="comment">//标志符表中没有该标志符，将该标志符存入标志符表中，并返回其在符号表中的位置</span></div><div class="line">				idLength++;<span class="comment">//标志符新增一个</span></div><div class="line">				id[idLength<span class="number">-1</span>]=str;<span class="comment">//将新标志符存放到标志符表中，索引从0开始</span></div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(标识符："</span>+str+<span class="string">")"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//是否为数字</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> isNumber(<span class="keyword">String</span> str)&#123;</div><div class="line">		<span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">		<span class="built_in">for</span>(;i&lt;numLength;i++)&#123;</div><div class="line">			<span class="built_in">if</span>(str.equals(num[i]))&#123;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(常量："</span>+str+<span class="string">")"</span>);</div><div class="line">				i=numLength;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">if</span>(i==numLength)&#123;</div><div class="line">			numLength++;</div><div class="line">			num[numLength<span class="number">-1</span>]=str;</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"(常量："</span>+str+<span class="string">")"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> analyse(<span class="keyword">String</span> str)&#123;</div><div class="line">		<span class="keyword">char</span> ch;<span class="comment">//存放当前字符</span></div><div class="line">		<span class="keyword">char</span> ch2;<span class="comment">//存放下一个字符</span></div><div class="line">		<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++,<span class="keyword">word</span>=<span class="string">""</span>)&#123;</div><div class="line">			ch=str.charAt(i);<span class="comment">//从0索引</span></div><div class="line">			<span class="built_in">if</span>(ch==<span class="string">'\n'</span>||ch==<span class="string">'\t'</span>||ch==<span class="string">' '</span>);<span class="comment">//忽略回车、Tab、空格字符</span></div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(isDigit(ch))&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=str.length()-i;j++)&#123;</div><div class="line">					<span class="keyword">int</span> k=i+j;</div><div class="line">					<span class="built_in">if</span>(k==(str.length()+<span class="number">1</span>))&#123;<span class="comment">//错误语句，没有;界符</span></div><div class="line">						isNumber(<span class="keyword">word</span>);</div><div class="line">						j=str.length();<span class="comment">//跳出循环</span></div><div class="line">						i=i+j<span class="number">-1</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="built_in">else</span>&#123;</div><div class="line">						ch2=str.charAt(k);</div><div class="line">						<span class="built_in">if</span>(isDigit(ch2)||ch2==<span class="string">'.'</span>)&#123;</div><div class="line">							<span class="keyword">word</span>=<span class="keyword">word</span>+ch2;</div><div class="line">						&#125;</div><div class="line">						<span class="built_in">else</span>&#123;</div><div class="line">							isNumber(<span class="keyword">word</span>);</div><div class="line">							i=i+j<span class="number">-1</span>;<span class="comment">//跳过j-1个字符</span></div><div class="line">							j=str.length();<span class="comment">//跳出循环</span></div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(isLetter(ch)||ch==<span class="string">'_'</span>)&#123;<span class="comment">//变量以字符或者下划线开头</span></div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				<span class="built_in">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=str.length()-i;j++)&#123;</div><div class="line">					<span class="keyword">int</span> k=i+j;</div><div class="line">					<span class="built_in">if</span>(k==str.length())&#123;</div><div class="line">						isKeyword(<span class="keyword">word</span>);</div><div class="line">						i=i+j<span class="number">-1</span>;</div><div class="line">						j=str.length();<span class="comment">//识别到行尾，跳出循环</span></div><div class="line">					&#125;</div><div class="line">					<span class="built_in">else</span>&#123;</div><div class="line">						ch2=str.charAt(k);</div><div class="line">						<span class="built_in">if</span>(isLetter(ch2)||isDigit(ch2)||ch2==<span class="string">'_'</span>)&#123;<span class="comment">//变量由字母、数字或下划线组成</span></div><div class="line">							<span class="keyword">word</span>=<span class="keyword">word</span>+ch2;</div><div class="line">						&#125;</div><div class="line">						<span class="built_in">else</span>&#123;</div><div class="line">							isKeyword(<span class="keyword">word</span>);</div><div class="line">							i=i+j<span class="number">-1</span>;<span class="comment">//跳过j-1个字符</span></div><div class="line">							j=str.length();<span class="comment">//跳出循环，识别下一个单词</span></div><div class="line">						&#125;</div><div class="line">					&#125;	</div><div class="line">				&#125;		</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'+'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				ch2=str.charAt(i+<span class="number">1</span>);</div><div class="line">				<span class="built_in">if</span>(ch2==<span class="string">'='</span>)&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号： "</span>+ch+ch2+<span class="string">")"</span>);</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">else</span>&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'-'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				ch2=str.charAt(i+<span class="number">1</span>);</div><div class="line">				<span class="built_in">if</span>(ch2==<span class="string">'='</span>)&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号： "</span>+ch+ch2+<span class="string">")"</span>);</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">else</span>&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'*'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				ch2=str.charAt(i+<span class="number">1</span>);</div><div class="line">				<span class="built_in">if</span>(ch2==<span class="string">'='</span>)&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号： "</span>+ch+ch2+<span class="string">")"</span>);</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">else</span>&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'/'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				ch2=str.charAt(i+<span class="number">1</span>);</div><div class="line">				<span class="built_in">if</span>(ch2==<span class="string">'='</span>)&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号： "</span>+ch+ch2+<span class="string">")"</span>);<span class="comment">//除等/=</span></div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">else</span> <span class="built_in">if</span>(ch2==<span class="string">'/'</span>)&#123;</div><div class="line">					System.out.<span class="built_in">print</span>(<span class="string">"单行注释\t"</span>);</div><div class="line">					System.out.<span class="built_in">print</span>(<span class="string">"注释内容为："</span>);</div><div class="line">					<span class="built_in">for</span>(<span class="keyword">int</span> m=i;m&lt;str.length();m++)&#123;</div><div class="line">						System.out.<span class="built_in">print</span>(str.charAt(m));</div><div class="line">					&#125;</div><div class="line">					System.out.<span class="built_in">println</span>();</div><div class="line">					i=str.length();<span class="comment">//注释行//，读取下一行</span></div><div class="line">				&#125;</div><div class="line">				<span class="built_in">else</span>&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'%'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				ch2=str.charAt(i+<span class="number">1</span>);</div><div class="line">				<span class="built_in">if</span>(ch2==<span class="string">'='</span>)&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号： "</span>+ch+ch2+<span class="string">")"</span>);</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">else</span>&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'&lt;'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				ch2=str.charAt(i+<span class="number">1</span>);</div><div class="line">				<span class="built_in">if</span>(ch2==<span class="string">'='</span>)&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号： "</span>+ch+ch2+<span class="string">")"</span>);</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">else</span>&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'&gt;'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				ch2=str.charAt(i+<span class="number">1</span>);</div><div class="line">				<span class="built_in">if</span>(ch2==<span class="string">'='</span>)&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号： "</span>+ch+ch2+<span class="string">")"</span>);</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">else</span>&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'='</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				ch2=str.charAt(i+<span class="number">1</span>);</div><div class="line">				<span class="built_in">if</span>(ch2==<span class="string">'='</span>)&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号： "</span>+ch+ch2+<span class="string">")"</span>);</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">else</span>&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'!'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				ch2=str.charAt(i+<span class="number">1</span>);</div><div class="line">				<span class="built_in">if</span>(ch2==<span class="string">'='</span>)&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号： "</span>+ch+ch2+<span class="string">")"</span>);</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">else</span>&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'&amp;'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				ch2=str.charAt(i+<span class="number">1</span>);</div><div class="line">				<span class="built_in">if</span>(ch2==<span class="string">'&amp;'</span>)&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号： "</span>+ch+ch2+<span class="string">")"</span>);</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">else</span>&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"非法字符&amp;"</span>);</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"位置："</span>+<span class="built_in">line</span>+<span class="string">"行"</span>+i+<span class="string">"字符"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'|'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				ch2=str.charAt(i+<span class="number">1</span>);</div><div class="line">				<span class="built_in">if</span>(ch2==<span class="string">'|'</span>)&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"(符号： "</span>+ch+ch2+<span class="string">")"</span>);</div><div class="line">					i++;</div><div class="line">				&#125;</div><div class="line">				<span class="built_in">else</span>&#123;</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"非法字符|"</span>);</div><div class="line">					System.out.<span class="built_in">println</span>(<span class="string">"位置："</span>+<span class="built_in">line</span>+<span class="string">"行"</span>+i+<span class="string">"字符"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'('</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">')'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'['</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">']'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'&#123;'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'&#125;'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">','</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">';'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'"'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span> <span class="built_in">if</span>(ch==<span class="string">'.'</span>)&#123;</div><div class="line">				<span class="keyword">word</span>=<span class="keyword">word</span>+ch;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"(符号："</span>+ch+<span class="string">")"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">else</span>&#123;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"非法字符"</span>+ch);</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"位置："</span>+(<span class="built_in">line</span>+<span class="number">1</span>)+<span class="string">"行"</span>+(i+<span class="number">1</span>)+<span class="string">"字符"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span> args[])&#123;</div><div class="line">		Analysis c=<span class="keyword">new</span> Analysis();</div><div class="line">		Scanner sc=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"请输入您要编译的源程序文件名"</span>);</div><div class="line">		c.sourceFile=sc.next();<span class="comment">//输入文件路径、名</span></div><div class="line">		<span class="built_in">try</span>&#123;</div><div class="line">			<span class="built_in">File</span> f=<span class="keyword">new</span> <span class="built_in">File</span>(c.sourceFile);<span class="comment">//用指定的文件名构建文件对象</span></div><div class="line">			RandomAccessFile raf=<span class="keyword">new</span> RandomAccessFile(f,<span class="string">"r"</span>);<span class="comment">//创建文件随机访问</span></div><div class="line">			<span class="keyword">int</span> fileLine=<span class="number">0</span>;<span class="comment">//文件行数</span></div><div class="line">			<span class="built_in">while</span>(raf.readLine()!=null)&#123;</div><div class="line">				fileLine++;</div><div class="line">			&#125;</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"源程序共有"</span>+fileLine+<span class="string">"行"</span>);</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"源程序内容为："</span>);</div><div class="line">			raf.<span class="built_in">seek</span>(<span class="number">0</span>);  <span class="comment">//从第0个字符开始读取</span></div><div class="line">			<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fileLine;i++)&#123;</div><div class="line">				System.out.<span class="built_in">println</span>(raf.readLine());</div><div class="line">			&#125;</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"分析结果为："</span>);</div><div class="line">			raf.<span class="built_in">seek</span>(<span class="number">0</span>);</div><div class="line">			<span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fileLine;i++)&#123;</div><div class="line">				c.sentence=raf.readLine();</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"第"</span>+(i+<span class="number">1</span>)+<span class="string">"行："</span>);</div><div class="line">				c.analyse(c.sentence);</div><div class="line">				c.<span class="built_in">line</span>++;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="built_in">catch</span> (IOException e)&#123;</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"文件未找到，请输入正确的文件路径"</span>);</div><div class="line">		&#125;;</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content:encoded>
      
      <comments>http://yoursite.com/posts/58818/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HashTable源码剖析</title>
      <link>http://yoursite.com/posts/645/</link>
      <guid>http://yoursite.com/posts/645/</guid>
      <pubDate>Wed, 26 Apr 2017 13:23:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;Hashtable简介&lt;/p&gt;
&lt;p&gt;HashTable同样是基于哈希表实现的，同样每个元素都是key-value对，其内部也是通过单链表解决冲突问题，容量不足（超过了阈值）时，同样会自动增长。&lt;/p&gt;
&lt;p&gt;Hashtable也是JDK1.0引入的类，是线程安全的，能用于
      
      </description>
      
      <content:encoded><![CDATA[<p>Hashtable简介</p>
<p>HashTable同样是基于哈希表实现的，同样每个元素都是key-value对，其内部也是通过单链表解决冲突问题，容量不足（超过了阈值）时，同样会自动增长。</p>
<p>Hashtable也是JDK1.0引入的类，是线程安全的，能用于多线程环境中。</p>
<p>Hashtable同样实现了Serializable接口，它支持序列化，实现了Cloneable接口，能被克隆。</p>
<p>##Hashtable源码剖析<br>Hashtable的源码的很多实现都和HashMap差不多，源码如下（加入了比较详细的注释）：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.util;    </div><div class="line"><span class="keyword">import</span> java.io.*;    </div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;    </span></div><div class="line">    <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;    </div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;    </div><div class="line">   </div><div class="line">    <span class="comment">// 保存key-value的数组。    </span></div><div class="line">    <span class="comment">// Hashtable同样采用单链表解决冲突，每一个Entry本质上是一个单向链表    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry[] table;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable中键值对的数量    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> count;    </div><div class="line">   </div><div class="line">    <span class="comment">// 阈值，用于判断是否需要调整Hashtable的容量（threshold = 容量*加载因子）    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold;    </div><div class="line">   </div><div class="line">    <span class="comment">// 加载因子    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> loadFactor;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable被改变的次数，用于fail-fast机制的实现    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// 序列版本号    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1421746759512286392</span>L;    </div><div class="line">   </div><div class="line">    <span class="comment">// 指定“容量大小”和“加载因子”的构造函数    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;    </div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+    </div><div class="line">                                               initialCapacity);    </div><div class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Load: "</span>+loadFactor);    </div><div class="line">   </div><div class="line">        <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)    </div><div class="line">            initialCapacity = <span class="number">1</span>;    </div><div class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;    </div><div class="line">        table = <span class="keyword">new</span> Entry[initialCapacity];    </div><div class="line">        threshold = (<span class="keyword">int</span>)(initialCapacity * loadFactor);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 指定“容量大小”的构造函数    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;    </div><div class="line">        <span class="keyword">this</span>(initialCapacity, <span class="number">0.75</span>f);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 默认构造函数。    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="comment">// 默认构造函数，指定的容量大小是11；加载因子是0.75    </span></div><div class="line">        <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75</span>f);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 包含“子Map”的构造函数    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(Map&lt;? <span class="keyword">extends</span> K, ? <span class="keyword">extends</span> V&gt; t)</span> </span>&#123;    </div><div class="line">        <span class="keyword">this</span>(Math.max(<span class="number">2</span>*t.size(), <span class="number">11</span>), <span class="number">0.75</span>f);    </div><div class="line">        <span class="comment">// 将“子Map”的全部元素都添加到Hashtable中    </span></div><div class="line">        putAll(t);    </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (useAltHashing) &#123;</div><div class="line">            <span class="keyword">if</span> (k.getClass() == String.class) &#123;</div><div class="line">                <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> h = hashSeed ^ k.hashCode();</div><div class="line"></div><div class="line">                <span class="comment">// This function ensures that hashCodes that differ only by</span></div><div class="line">                <span class="comment">// constant multiples at each bit position have a bounded</span></div><div class="line">                <span class="comment">// number of collisions (approximately 8 at default load factor).</span></div><div class="line">                h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</div><div class="line">                <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</div><div class="line">             &#125;</div><div class="line">        &#125; <span class="keyword">else</span>  &#123;</div><div class="line">            <span class="function"><span class="keyword">return</span> k.<span class="title">hashCode</span><span class="params">()</span></span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> count;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回“所有key”的枚举对象    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Enumeration&lt;K&gt; keys() &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.&lt;K&gt;getEnumeration(KEYS);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回“所有value”的枚举对象    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Enumeration&lt;V&gt; elements() &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.&lt;V&gt;getEnumeration(VALUES);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 判断Hashtable是否包含“值(value)”    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object value)</span> </span>&#123;    </div><div class="line">        <span class="comment">//注意，Hashtable中的value不能是null，    </span></div><div class="line">        <span class="comment">// 若是null的话，抛出异常!    </span></div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 从后向前遍历table数组中的元素(Entry)    </span></div><div class="line">        <span class="comment">// 对于每个Entry(单向链表)，逐个遍历，判断节点的值是否等于value    </span></div><div class="line">        Entry tab[] = table;    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = tab.length ; i-- &gt; <span class="number">0</span> ;) &#123;    </div><div class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">                <span class="keyword">if</span> (e.value.equals(value)) &#123;    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;    </div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="title">contains</span><span class="params">(value)</span></span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 判断Hashtable是否包含key    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;    </div><div class="line">        Entry tab[] = table;    </div><div class="line">        <span class="comment">//计算hash值，直接用key的hashCode代替  </span></div><div class="line">        <span class="keyword">int</span> hash = key.hashCode();      </div><div class="line">        <span class="comment">// 计算在数组中的索引值   </span></div><div class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">        <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素    </span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回key对应的value，没有的话返回null    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;    </div><div class="line">        Entry tab[] = table;    </div><div class="line">        <span class="keyword">int</span> hash = hash(key);</div><div class="line">        <span class="comment">// 计算索引值，    </span></div><div class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">        <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素    </span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </div><div class="line">                <span class="keyword">return</span> e.value;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 调整Hashtable的长度，将长度变成原来的2倍+1   </span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">int</span> oldCapacity = table.length;    </div><div class="line">        Entry[] oldMap = table;    </div><div class="line">   </div><div class="line">        <span class="comment">//创建新容量大小的Entry数组  </span></div><div class="line">        <span class="keyword">int</span> newCapacity = oldCapacity * <span class="number">2</span> + <span class="number">1</span>;    </div><div class="line">        Entry[] newMap = <span class="keyword">new</span> Entry[newCapacity];    </div><div class="line">   </div><div class="line">        modCount++;    </div><div class="line">        threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);    </div><div class="line">        table = newMap;    </div><div class="line">          </div><div class="line">        <span class="comment">//将“旧的Hashtable”中的元素复制到“新的Hashtable”中  </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;    </div><div class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; old = oldMap[i] ; old != <span class="keyword">null</span> ; ) &#123;    </div><div class="line">                Entry&lt;K,V&gt; e = old;    </div><div class="line">                old = old.next;    </div><div class="line">                <span class="comment">//重新计算index  </span></div><div class="line">                <span class="keyword">int</span> index = (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;    </div><div class="line">                e.next = newMap[index];    </div><div class="line">                newMap[index] = e;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将“key-value”添加到Hashtable中    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;    </div><div class="line">        <span class="comment">// Hashtable中不能插入value为null的元素！！！    </span></div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 若“Hashtable中已存在键为key的键值对”，    </span></div><div class="line">        <span class="comment">// 则用“新的value”替换“旧的value”    </span></div><div class="line">        Entry tab[] = table;    </div><div class="line">        <span class="keyword">int</span> hash = hash(key);</div><div class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </div><div class="line">                V old = e.value;    </div><div class="line">                e.value = value;    </div><div class="line">                <span class="keyword">return</span> old;    </div><div class="line">                &#125;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 若“Hashtable中不存在键为key的键值对”，  </span></div><div class="line">        <span class="comment">// 将“修改统计数”+1    </span></div><div class="line">        modCount++;    </div><div class="line">        <span class="comment">//  若“Hashtable实际容量” &gt; “阈值”(阈值=总的容量 * 加载因子)    </span></div><div class="line">        <span class="comment">//  则调整Hashtable的大小    </span></div><div class="line">        <span class="keyword">if</span> (count &gt;= threshold) &#123;  </div><div class="line">            rehash();    </div><div class="line">   </div><div class="line">            tab = table;    </div><div class="line">            index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">//将新的key-value对插入到tab[index]处（即链表的头结点）  </span></div><div class="line">        Entry&lt;K,V&gt; e = tab[index];           </div><div class="line">        tab[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </div><div class="line">        count++;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除Hashtable中键为key的元素    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;    </div><div class="line">        Entry tab[] = table;    </div><div class="line">        <span class="keyword">int</span> hash = hash(key);</div><div class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">          </div><div class="line">        <span class="comment">//从table[index]链表中找出要删除的节点，并删除该节点。  </span></div><div class="line">        <span class="comment">//因为是单链表，因此要保留带删节点的前一个节点，才能有效地删除节点  </span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span> ; e != <span class="keyword">null</span> ; prev = e, e = e.next) &#123;    </div><div class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </div><div class="line">                modCount++;    </div><div class="line">                <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;    </div><div class="line">                    prev.next = e.next;    </div><div class="line">                &#125; <span class="keyword">else</span> &#123;    </div><div class="line">                    tab[index] = e.next;    </div><div class="line">                &#125;    </div><div class="line">                count--;    </div><div class="line">                V oldValue = e.value;    </div><div class="line">                e.value = <span class="keyword">null</span>;    </div><div class="line">                <span class="keyword">return</span> oldValue;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将“Map(t)”的中全部元素逐一添加到Hashtable中    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? <span class="keyword">extends</span> K, ? <span class="keyword">extends</span> V&gt; t)</span> </span>&#123;    </div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;? <span class="keyword">extends</span> K, ? <span class="keyword">extends</span> V&gt; e : t.entrySet())    </div><div class="line">            put(e.getKey(), e.getValue());    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 清空Hashtable    </span></div><div class="line">    <span class="comment">// 将Hashtable的table数组的值全部设为null    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </div><div class="line">        Entry tab[] = table;    </div><div class="line">        modCount++;    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = tab.length; --index &gt;= <span class="number">0</span>; )    </div><div class="line">            tab[index] = <span class="keyword">null</span>;    </div><div class="line">        count = <span class="number">0</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 克隆一个Hashtable，并以Object的形式返回。    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">Object <span class="title">clone</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">try</span> &#123;    </div><div class="line">            Hashtable&lt;K,V&gt; t = (Hashtable&lt;K,V&gt;) <span class="keyword">super</span>.clone();    </div><div class="line">            t.table = <span class="keyword">new</span> Entry[table.length];    </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = table.length ; i-- &gt; <span class="number">0</span> ; ) &#123;    </div><div class="line">                t.table[i] = (table[i] != <span class="keyword">null</span>)    </div><div class="line">                ? (Entry&lt;K,V&gt;) table[i].clone() : <span class="keyword">null</span>;    </div><div class="line">            &#125;    </div><div class="line">            t.keySet = <span class="keyword">null</span>;    </div><div class="line">            t.entrySet = <span class="keyword">null</span>;    </div><div class="line">            t.values = <span class="keyword">null</span>;    </div><div class="line">            t.modCount = <span class="number">0</span>;    </div><div class="line">            <span class="keyword">return</span> t;    </div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;     </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">String <span class="title">toString</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">int</span> max = size() - <span class="number">1</span>;    </div><div class="line">        <span class="keyword">if</span> (max == <span class="number">-1</span>)    </div><div class="line">            <span class="keyword">return</span> <span class="string">"&#123;&#125;"</span>;    </div><div class="line">   </div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();    </div><div class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; it = entrySet().iterator();    </div><div class="line">   </div><div class="line">        sb.append(<span class="string">'&#123;'</span>);    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;    </div><div class="line">            Map.Entry&lt;K,V&gt; e = it.next();    </div><div class="line">            K key = e.getKey();    </div><div class="line">            V value = e.getValue();    </div><div class="line">            sb.append(key   == <span class="keyword">this</span> ? <span class="string">"(this Map)"</span> : key.toString());    </div><div class="line">            sb.append(<span class="string">'='</span>);    </div><div class="line">            sb.append(value == <span class="keyword">this</span> ? <span class="string">"(this Map)"</span> : value.toString());    </div><div class="line">   </div><div class="line">            <span class="keyword">if</span> (i == max)    </div><div class="line">                <span class="keyword">return</span> sb.append(<span class="string">'&#125;'</span>).toString();    </div><div class="line">            sb.append(<span class="string">", "</span>);    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 获取Hashtable的枚举类对象    </span></div><div class="line">    <span class="comment">// 若Hashtable的实际大小为0,则返回“空枚举类”对象；    </span></div><div class="line">    <span class="comment">// 否则，返回正常的Enumerator的对象。   </span></div><div class="line">    <span class="keyword">private</span> &lt;T&gt; Enumeration&lt;T&gt; getEnumeration(<span class="keyword">int</span> type) &#123;    </div><div class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;    </div><div class="line">        <span class="keyword">return</span> (Enumeration&lt;T&gt;)emptyEnumerator;    </div><div class="line">    &#125; <span class="keyword">else</span> &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Enumerator&lt;T&gt;(type, <span class="keyword">false</span>);    </div><div class="line">    &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 获取Hashtable的迭代器    </span></div><div class="line">    <span class="comment">// 若Hashtable的实际大小为0,则返回“空迭代器”对象；    </span></div><div class="line">    <span class="comment">// 否则，返回正常的Enumerator的对象。(Enumerator实现了迭代器和枚举两个接口)    </span></div><div class="line">    <span class="keyword">private</span> &lt;T&gt; Iterator&lt;T&gt; getIterator(<span class="keyword">int</span> type) &#123;    </div><div class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;    </div><div class="line">            <span class="keyword">return</span> (Iterator&lt;T&gt;) emptyIterator;    </div><div class="line">        &#125; <span class="keyword">else</span> &#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Enumerator&lt;T&gt;(type, <span class="keyword">true</span>);    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable的“key的集合”。它是一个Set，没有重复元素    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Set&lt;K&gt; keySet = <span class="keyword">null</span>;    </div><div class="line">    <span class="comment">// Hashtable的“key-value的集合”。它是一个Set，没有重复元素    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = <span class="keyword">null</span>;    </div><div class="line">    <span class="comment">// Hashtable的“key-value的集合”。它是一个Collection，可以有重复元素    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Collection&lt;V&gt; values = <span class="keyword">null</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回一个被synchronizedSet封装后的KeySet对象    </span></div><div class="line">    <span class="comment">// synchronizedSet封装的目的是对KeySet的所有方法都添加synchronized，实现多线程同步    </span></div><div class="line">    <span class="keyword">public</span> Set&lt;K&gt; keySet() &#123;    </div><div class="line">        <span class="keyword">if</span> (keySet == <span class="keyword">null</span>)    </div><div class="line">            keySet = Collections.synchronizedSet(<span class="keyword">new</span> KeySet(), <span class="keyword">this</span>);    </div><div class="line">        <span class="keyword">return</span> keySet;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable的Key的Set集合。    </span></div><div class="line">    <span class="comment">// KeySet继承于AbstractSet，所以，KeySet中的元素没有重复的。    </span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;    </div><div class="line">        <span class="keyword">public</span> Iterator&lt;K&gt; iterator() &#123;    </div><div class="line">            <span class="function"><span class="keyword">return</span> <span class="title">getIterator</span><span class="params">(KEYS)</span></span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> count;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">            <span class="function"><span class="keyword">return</span> <span class="title">containsKey</span><span class="params">(o)</span></span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> Hashtable.<span class="keyword">this</span>.remove(o) != <span class="keyword">null</span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </div><div class="line">            Hashtable.<span class="keyword">this</span>.clear();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回一个被synchronizedSet封装后的EntrySet对象    </span></div><div class="line">    <span class="comment">// synchronizedSet封装的目的是对EntrySet的所有方法都添加synchronized，实现多线程同步    </span></div><div class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;    </div><div class="line">        <span class="keyword">if</span> (entrySet==<span class="keyword">null</span>)    </div><div class="line">            entrySet = Collections.synchronizedSet(<span class="keyword">new</span> EntrySet(), <span class="keyword">this</span>);    </div><div class="line">        <span class="keyword">return</span> entrySet;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable的Entry的Set集合。    </span></div><div class="line">    <span class="comment">// EntrySet继承于AbstractSet，所以，EntrySet中的元素没有重复的。    </span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;    </div><div class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;    </div><div class="line">            <span class="function"><span class="keyword">return</span> <span class="title">getIterator</span><span class="params">(ENTRIES)</span></span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Map.Entry&lt;K,V&gt; o)</span> </span>&#123;    </div><div class="line">            <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">add</span><span class="params">(o)</span></span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 查找EntrySet中是否包含Object(0)    </span></div><div class="line">        <span class="comment">// 首先，在table中找到o对应的Entry链表    </span></div><div class="line">        <span class="comment">// 然后，查找Entry链表中是否存在Object    </span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">            Map.Entry entry = (Map.Entry)o;    </div><div class="line">            Object key = entry.getKey();    </div><div class="line">            Entry[] tab = table;    </div><div class="line">            <span class="keyword">int</span> hash = hash(key);</div><div class="line">            <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">   </div><div class="line">            <span class="keyword">for</span> (Entry e = tab[index]; e != <span class="keyword">null</span>; e = e.next)    </div><div class="line">                <span class="keyword">if</span> (e.hash==hash &amp;&amp; e.equals(entry))    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 删除元素Object(0)    </span></div><div class="line">        <span class="comment">// 首先，在table中找到o对应的Entry链表  </span></div><div class="line">        <span class="comment">// 然后，删除链表中的元素Object    </span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">            Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;    </div><div class="line">            K key = entry.getKey();    </div><div class="line">            Entry[] tab = table;    </div><div class="line">            <span class="keyword">int</span> hash = hash(key);</div><div class="line">            <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">   </div><div class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span>; e != <span class="keyword">null</span>;    </div><div class="line">                 prev = e, e = e.next) &#123;    </div><div class="line">                <span class="keyword">if</span> (e.hash==hash &amp;&amp; e.equals(entry)) &#123;    </div><div class="line">                    modCount++;    </div><div class="line">                    <span class="keyword">if</span> (prev != <span class="keyword">null</span>)    </div><div class="line">                        prev.next = e.next;    </div><div class="line">                    <span class="keyword">else</span>   </div><div class="line">                        tab[index] = e.next;    </div><div class="line">   </div><div class="line">                    count--;    </div><div class="line">                    e.value = <span class="keyword">null</span>;    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> count;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </div><div class="line">            Hashtable.<span class="keyword">this</span>.clear();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回一个被synchronizedCollection封装后的ValueCollection对象    </span></div><div class="line">    <span class="comment">// synchronizedCollection封装的目的是对ValueCollection的所有方法都添加synchronized，实现多线程同步    </span></div><div class="line">    <span class="keyword">public</span> Collection&lt;V&gt; values() &#123;    </div><div class="line">    <span class="keyword">if</span> (values==<span class="keyword">null</span>)    </div><div class="line">        values = Collections.synchronizedCollection(<span class="keyword">new</span> ValueCollection(),    </div><div class="line">                                                        <span class="keyword">this</span>);    </div><div class="line">        <span class="keyword">return</span> values;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable的value的Collection集合。    </span></div><div class="line">    <span class="comment">// ValueCollection继承于AbstractCollection，所以，ValueCollection中的元素可以重复的。    </span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueCollection</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;    </div><div class="line">        <span class="keyword">public</span> Iterator&lt;V&gt; iterator() &#123;    </div><div class="line">        <span class="function"><span class="keyword">return</span> <span class="title">getIterator</span><span class="params">(VALUES)</span></span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> count;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">            <span class="function"><span class="keyword">return</span> <span class="title">containsValue</span><span class="params">(o)</span></span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </div><div class="line">            Hashtable.<span class="keyword">this</span>.clear();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 重新equals()函数    </span></div><div class="line">    <span class="comment">// 若两个Hashtable的所有key-value键值对都相等，则判断它们两个相等    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">   </div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        Map&lt;K,V&gt; t = (Map&lt;K,V&gt;) o;    </div><div class="line">        <span class="keyword">if</span> (t.size() != size())    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">   </div><div class="line">        <span class="keyword">try</span> &#123;    </div><div class="line">            <span class="comment">// 通过迭代器依次取出当前Hashtable的key-value键值对    </span></div><div class="line">            <span class="comment">// 并判断该键值对，存在于Hashtable中。    </span></div><div class="line">            <span class="comment">// 若不存在，则立即返回false；否则，遍历完“当前Hashtable”并返回true。    </span></div><div class="line">            Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i = entrySet().iterator();    </div><div class="line">            <span class="keyword">while</span> (i.hasNext()) &#123;    </div><div class="line">                Map.Entry&lt;K,V&gt; e = i.next();    </div><div class="line">                K key = e.getKey();    </div><div class="line">                V value = e.getValue();    </div><div class="line">                <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </div><div class="line">                    <span class="keyword">if</span> (!(t.get(key)==<span class="keyword">null</span> &amp;&amp; t.containsKey(key)))    </div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">                &#125; <span class="keyword">else</span> &#123;    </div><div class="line">                    <span class="keyword">if</span> (!value.equals(t.get(key)))    </div><div class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">                &#125;    </div><div class="line">            &#125;    </div><div class="line">        &#125; <span class="keyword">catch</span> (ClassCastException unused)   &#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125; <span class="keyword">catch</span> (NullPointerException unused) &#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 计算Entry的hashCode    </span></div><div class="line">    <span class="comment">// 若 Hashtable的实际大小为0 或者 加载因子&lt;0，则返回0。    </span></div><div class="line">    <span class="comment">// 否则，返回“Hashtable中的每个Entry的key和value的异或值 的总和”。    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;    </div><div class="line">        <span class="keyword">if</span> (count == <span class="number">0</span> || loadFactor &lt; <span class="number">0</span>)    </div><div class="line">            <span class="keyword">return</span> h;  <span class="comment">// Returns zero    </span></div><div class="line">   </div><div class="line">        loadFactor = -loadFactor;  <span class="comment">// Mark hashCode computation in progress    </span></div><div class="line">        Entry[] tab = table;    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; i++)    </div><div class="line">            <span class="keyword">for</span> (Entry e = tab[i]; e != <span class="keyword">null</span>; e = e.next)    </div><div class="line">                h += e.key.hashCode() ^ e.value.hashCode();    </div><div class="line">        loadFactor = -loadFactor;  <span class="comment">// Mark hashCode computation complete    </span></div><div class="line">   </div><div class="line">        <span class="keyword">return</span> h;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// java.io.Serializable的写入函数    </span></div><div class="line">    <span class="comment">// 将Hashtable的“总的容量，实际容量，所有的Entry”都写入到输出流中    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span>    </span></div><div class="line">        <span class="keyword">throws</span> IOException    </div><div class="line">    &#123;    </div><div class="line">        <span class="comment">// Write out the length, threshold, loadfactor    </span></div><div class="line">        s.defaultWriteObject();    </div><div class="line">   </div><div class="line">        <span class="comment">// Write out length, count of elements and then the key/value objects    </span></div><div class="line">        s.writeInt(table.length);    </div><div class="line">        s.writeInt(count);    </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = table.length<span class="number">-1</span>; index &gt;= <span class="number">0</span>; index--) &#123;    </div><div class="line">            Entry entry = table[index];    </div><div class="line">   </div><div class="line">            <span class="keyword">while</span> (entry != <span class="keyword">null</span>) &#123;    </div><div class="line">            s.writeObject(entry.key);    </div><div class="line">            s.writeObject(entry.value);    </div><div class="line">            entry = entry.next;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出    </span></div><div class="line">    <span class="comment">// 将Hashtable的“总的容量，实际容量，所有的Entry”依次读出    </span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>    </span></div><div class="line">         <span class="keyword">throws</span> IOException, ClassNotFoundException    </div><div class="line">    &#123;    </div><div class="line">        <span class="comment">// Read in the length, threshold, and loadfactor    </span></div><div class="line">        s.defaultReadObject();    </div><div class="line">   </div><div class="line">        <span class="comment">// Read the original length of the array and number of elements    </span></div><div class="line">        <span class="keyword">int</span> origlength = s.readInt();    </div><div class="line">        <span class="keyword">int</span> elements = s.readInt();    </div><div class="line">   </div><div class="line">        <span class="comment">// Compute new size with a bit of room 5% to grow but    </span></div><div class="line">        <span class="comment">// no larger than the original size.  Make the length    </span></div><div class="line">        <span class="comment">// odd if it's large enough, this helps distribute the entries.    </span></div><div class="line">        <span class="comment">// Guard against the length ending up zero, that's not valid.    </span></div><div class="line">        <span class="keyword">int</span> length = (<span class="keyword">int</span>)(elements * loadFactor) + (elements / <span class="number">20</span>) + <span class="number">3</span>;    </div><div class="line">        <span class="keyword">if</span> (length &gt; elements &amp;&amp; (length &amp; <span class="number">1</span>) == <span class="number">0</span>)    </div><div class="line">            length--;    </div><div class="line">        <span class="keyword">if</span> (origlength &gt; <span class="number">0</span> &amp;&amp; length &gt; origlength)    </div><div class="line">            length = origlength;    </div><div class="line">   </div><div class="line">        Entry[] table = <span class="keyword">new</span> Entry[length];    </div><div class="line">        count = <span class="number">0</span>;    </div><div class="line">   </div><div class="line">        <span class="comment">// Read the number of elements and then all the key/value objects    </span></div><div class="line">        <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;    </div><div class="line">            K key = (K)s.readObject();    </div><div class="line">            V value = (V)s.readObject();    </div><div class="line">                <span class="comment">// synch could be eliminated for performance    </span></div><div class="line">                reconstitutionPut(table, key, value);    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">this</span>.table = table;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">reconstitutionPut</span><span class="params">(Entry[] tab, K key, V value)</span>    </span></div><div class="line">        <span class="keyword">throws</span> StreamCorruptedException    </div><div class="line">    &#123;    </div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();    </div><div class="line">        &#125;    </div><div class="line">        <span class="comment">// Makes sure the key is not already in the hashtable.    </span></div><div class="line">        <span class="comment">// This should not happen in deserialized version.    </span></div><div class="line">        <span class="keyword">int</span> hash = key.hashCode();    </div><div class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="comment">// Creates the new entry.    </span></div><div class="line">        Entry&lt;K,V&gt; e = tab[index];    </div><div class="line">        tab[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </div><div class="line">        count++;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Hashtable的Entry节点，它本质上是一个单向链表。    </span></div><div class="line">    <span class="comment">// 也因此，我们才能推断出Hashtable是由拉链法实现的散列表    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;    </div><div class="line">        <span class="comment">// 哈希值    </span></div><div class="line">        <span class="keyword">int</span> hash;    </div><div class="line">        K key;    </div><div class="line">        V value;    </div><div class="line">        <span class="comment">// 指向的下一个Entry，即链表的下一个节点    </span></div><div class="line">        Entry&lt;K,V&gt; next;    </div><div class="line">   </div><div class="line">        <span class="comment">// 构造函数    </span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">Entry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Entry&lt;K,V&gt; next)</span> </span>&#123;    </div><div class="line">            <span class="keyword">this</span>.hash = hash;    </div><div class="line">            <span class="keyword">this</span>.key = key;    </div><div class="line">            <span class="keyword">this</span>.value = value;    </div><div class="line">            <span class="keyword">this</span>.next = next;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">protected</span> <span class="function">Object <span class="title">clone</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value,    </div><div class="line">                  (next==<span class="keyword">null</span> ? <span class="keyword">null</span> : (Entry&lt;K,V&gt;) next.clone()));    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="function">K <span class="title">getKey</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> key;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="function">V <span class="title">getValue</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> value;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 设置value。若value是null，则抛出异常。    </span></div><div class="line">        <span class="keyword">public</span> <span class="function">V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;    </div><div class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();    </div><div class="line">   </div><div class="line">            V oldValue = <span class="keyword">this</span>.value;    </div><div class="line">            <span class="keyword">this</span>.value = value;    </div><div class="line">            <span class="keyword">return</span> oldValue;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 覆盖equals()方法，判断两个Entry是否相等。    </span></div><div class="line">        <span class="comment">// 若两个Entry的key和value都相等，则认为它们相等。    </span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">            Map.Entry e = (Map.Entry)o;    </div><div class="line">   </div><div class="line">            <span class="keyword">return</span> (key==<span class="keyword">null</span> ? e.getKey()==<span class="keyword">null</span> : key.equals(e.getKey())) &amp;&amp;    </div><div class="line">               (value==<span class="keyword">null</span> ? e.getValue()==<span class="keyword">null</span> : value.equals(e.getValue()));    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> hash ^ (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="function">String <span class="title">toString</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> key.toString()+<span class="string">"="</span>+value.toString();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEYS = <span class="number">0</span>;    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUES = <span class="number">1</span>;    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENTRIES = <span class="number">2</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// Enumerator的作用是提供了“通过elements()遍历Hashtable的接口” 和 “通过entrySet()遍历Hashtable的接口”。    </span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Enumerator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Enumeration</span>&lt;<span class="title">T</span>&gt;, <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;    </div><div class="line">        <span class="comment">// 指向Hashtable的table    </span></div><div class="line">        Entry[] table = Hashtable.<span class="keyword">this</span>.table;    </div><div class="line">        <span class="comment">// Hashtable的总的大小    </span></div><div class="line">        <span class="keyword">int</span> index = table.length;    </div><div class="line">        Entry&lt;K,V&gt; entry = <span class="keyword">null</span>;    </div><div class="line">        Entry&lt;K,V&gt; lastReturned = <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">int</span> type;    </div><div class="line">   </div><div class="line">        <span class="comment">// Enumerator是 “迭代器(Iterator)” 还是 “枚举类(Enumeration)”的标志    </span></div><div class="line">        <span class="comment">// iterator为true，表示它是迭代器；否则，是枚举类。    </span></div><div class="line">        <span class="keyword">boolean</span> iterator;    </div><div class="line">   </div><div class="line">        <span class="comment">// 在将Enumerator当作迭代器使用时会用到，用来实现fail-fast机制。    </span></div><div class="line">        <span class="keyword">protected</span> <span class="keyword">int</span> expectedModCount = modCount;    </div><div class="line">   </div><div class="line">        Enumerator(<span class="keyword">int</span> type, <span class="keyword">boolean</span> iterator) &#123;    </div><div class="line">            <span class="keyword">this</span>.type = type;    </div><div class="line">            <span class="keyword">this</span>.iterator = iterator;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 从遍历table的数组的末尾向前查找，直到找到不为null的Entry。    </span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;    </div><div class="line">            Entry&lt;K,V&gt; e = entry;    </div><div class="line">            <span class="keyword">int</span> i = index;    </div><div class="line">            Entry[] t = table;    </div><div class="line">            <span class="comment">/* Use locals for faster loop iteration */</span>   </div><div class="line">            <span class="keyword">while</span> (e == <span class="keyword">null</span> &amp;&amp; i &gt; <span class="number">0</span>) &#123;    </div><div class="line">                e = t[--i];    </div><div class="line">            &#125;    </div><div class="line">            entry = e;    </div><div class="line">            index = i;    </div><div class="line">            <span class="keyword">return</span> e != <span class="keyword">null</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 获取下一个元素    </span></div><div class="line">        <span class="comment">// 注意：从hasMoreElements() 和nextElement() 可以看出“Hashtable的elements()遍历方式”    </span></div><div class="line">        <span class="comment">// 首先，从后向前的遍历table数组。table数组的每个节点都是一个单向链表(Entry)。    </span></div><div class="line">        <span class="comment">// 然后，依次向后遍历单向链表Entry。    </span></div><div class="line">        <span class="keyword">public</span> <span class="function">T <span class="title">nextElement</span><span class="params">()</span> </span>&#123;    </div><div class="line">            Entry&lt;K,V&gt; et = entry;    </div><div class="line">            <span class="keyword">int</span> i = index;    </div><div class="line">            Entry[] t = table;    </div><div class="line">            <span class="comment">/* Use locals for faster loop iteration */</span>   </div><div class="line">            <span class="keyword">while</span> (et == <span class="keyword">null</span> &amp;&amp; i &gt; <span class="number">0</span>) &#123;    </div><div class="line">                et = t[--i];    </div><div class="line">            &#125;    </div><div class="line">            entry = et;    </div><div class="line">            index = i;    </div><div class="line">            <span class="keyword">if</span> (et != <span class="keyword">null</span>) &#123;    </div><div class="line">                Entry&lt;K,V&gt; e = lastReturned = entry;    </div><div class="line">                entry = e.next;    </div><div class="line">                <span class="keyword">return</span> type == KEYS ? (T)e.key : (type == VALUES ? (T)e.value : (T)e);    </div><div class="line">            &#125;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Enumerator"</span>);    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 迭代器Iterator的判断是否存在下一个元素    </span></div><div class="line">        <span class="comment">// 实际上，它是调用的hasMoreElements()    </span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="function"><span class="keyword">return</span> <span class="title">hasMoreElements</span><span class="params">()</span></span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 迭代器获取下一个元素    </span></div><div class="line">        <span class="comment">// 实际上，它是调用的nextElement()    </span></div><div class="line">        <span class="keyword">public</span> <span class="function">T <span class="title">next</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </div><div class="line">            <span class="function"><span class="keyword">return</span> <span class="title">nextElement</span><span class="params">()</span></span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 迭代器的remove()接口。    </span></div><div class="line">        <span class="comment">// 首先，它在table数组中找出要删除元素所在的Entry，    </span></div><div class="line">        <span class="comment">// 然后，删除单向链表Entry中的元素。    </span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">if</span> (!iterator)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();    </div><div class="line">            <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Hashtable Enumerator"</span>);    </div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </div><div class="line">   </div><div class="line">            <span class="keyword">synchronized</span>(Hashtable.<span class="keyword">this</span>) &#123;    </div><div class="line">                Entry[] tab = Hashtable.<span class="keyword">this</span>.table;    </div><div class="line">                <span class="keyword">int</span> index = (lastReturned.hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">   </div><div class="line">                <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span>; e != <span class="keyword">null</span>;    </div><div class="line">                     prev = e, e = e.next) &#123;    </div><div class="line">                    <span class="keyword">if</span> (e == lastReturned) &#123;    </div><div class="line">                        modCount++;    </div><div class="line">                        expectedModCount++;    </div><div class="line">                        <span class="keyword">if</span> (prev == <span class="keyword">null</span>)    </div><div class="line">                            tab[index] = e.next;    </div><div class="line">                        <span class="keyword">else</span>   </div><div class="line">                            prev.next = e.next;    </div><div class="line">                        count--;    </div><div class="line">                        lastReturned = <span class="keyword">null</span>;    </div><div class="line">                        <span class="keyword">return</span>;    </div><div class="line">                    &#125;    </div><div class="line">                &#125;    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Enumeration emptyEnumerator = <span class="keyword">new</span> EmptyEnumerator();    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Iterator emptyIterator = <span class="keyword">new</span> EmptyIterator();    </div><div class="line">   </div><div class="line">    <span class="comment">// 空枚举类    </span></div><div class="line">    <span class="comment">// 当Hashtable的实际大小为0；此时，又要通过Enumeration遍历Hashtable时，返回的是“空枚举类”的对象。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyEnumerator</span> <span class="keyword">implements</span> <span class="title">Enumeration</span>&lt;<span class="title">Object</span>&gt; </span>&#123;    </div><div class="line">   </div><div class="line">        EmptyEnumerator() &#123;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 空枚举类的hasMoreElements() 始终返回false    </span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 空枚举类的nextElement() 抛出异常    </span></div><div class="line">        <span class="keyword">public</span> <span class="function">Object <span class="title">nextElement</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Enumerator"</span>);    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="comment">// 空迭代器    </span></div><div class="line">    <span class="comment">// 当Hashtable的实际大小为0；此时，又要通过迭代器遍历Hashtable时，返回的是“空迭代器”的对象。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Object</span>&gt; </span>&#123;    </div><div class="line">   </div><div class="line">        EmptyIterator() &#123;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="function">Object <span class="title">next</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Iterator"</span>);    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Hashtable Iterator"</span>);    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##几点总结<br> 针对Hashtable，我们同样给出几点比较重要的总结，但要结合与HashMap的比较来总结。</p>
<ol>
<li>二者的存储结构和解决冲突的方法都是相同的。</li>
<li>HashTable在不指定容量的情况下的默认容量为11，而HashMap为16，Hashtable不要求底层数组的容量一定要为2的整数次幂，而HashMap则要求一定为2的整数次幂。</li>
<li>Hashtable中key和value都不允许为null，而HashMap中key和value都允许为null（key只能有一个为null，而value则可以有多个为null）。但是如果在Hashtable中有类似put(null,null)的操作，编译同样可以通过，因为key和value都是Object类型，但运行时会抛出NullPointerException异常，这是JDK的规范规定的。我们来看下ContainsKey方法和ContainsValue的源码：</li>
</ol>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断Hashtable是否包含“值(value)”    </span></div><div class="line"> <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> value) &#123;    </div><div class="line">     <span class="comment">//注意，Hashtable中的value不能是null，    </span></div><div class="line">     <span class="comment">// 若是null的话，抛出异常!    </span></div><div class="line">     <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();    </div><div class="line">     &#125;    </div><div class="line">  </div><div class="line">     <span class="comment">// 从后向前遍历table数组中的元素(Entry)    </span></div><div class="line">     <span class="comment">// 对于每个Entry(单向链表)，逐个遍历，判断节点的值是否等于value    </span></div><div class="line">     Entry tab[] = table;    </div><div class="line">     <span class="keyword">for</span> (<span class="built_in">int</span> i = tab.length ; i-- &gt; <span class="number">0</span> ;) &#123;    </div><div class="line">         <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">             <span class="keyword">if</span> (e.value.equals(value)) &#123;    </div><div class="line">                 <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">             &#125;    </div><div class="line">         &#125;    </div><div class="line">     &#125;    </div><div class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line"> &#125;    </div><div class="line">  </div><div class="line"> <span class="keyword">public</span> <span class="built_in">boolean</span> containsValue(<span class="keyword">Object</span> value) &#123;    </div><div class="line">     <span class="keyword">return</span> contains(value);    </div><div class="line"> &#125;    </div><div class="line">  </div><div class="line"> <span class="comment">// 判断Hashtable是否包含key    </span></div><div class="line"> <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="built_in">boolean</span> containsKey(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;    </div><div class="line">     Entry tab[] = table;    </div><div class="line">/计算hash值，直接用<span class="built_in">key</span>的hashCode代替  </div><div class="line">     <span class="built_in">int</span> hash = hash(<span class="built_in">key</span>);</div><div class="line">     <span class="comment">// 计算在数组中的索引值   </span></div><div class="line">     <span class="built_in">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </div><div class="line">     <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素    </span></div><div class="line">     <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </div><div class="line">         <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.<span class="built_in">key</span>.equals(<span class="built_in">key</span>)) &#123;    </div><div class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">         &#125;    </div><div class="line">     &#125;    </div><div class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p> 很明显，如果value为null，会直接抛出NullPointerException异常，但源码中并没有对key是否为null判断，有点小不解！不过NullPointerException属于RuntimeException异常，是可以由JVM自动抛出的，也许对key的值在JVM中有所限制吧。</p>
<ol>
<li>Hashtable扩容时，将容量变为原来的2倍加1，而HashMap扩容时，将容量变为原来的2倍。</li>
<li>Hashtable和HashMap都重新计算了key的hash值，Hashtable在求hash值对应的位置索引时，用取模运算，而HashMap在求位置索引时，则用与运算，且这里一般先用hash&amp;0x7FFFFFFF后，再对length取模，&amp;0x7FFFFFFF的目的是为了将负的hash值转化为正值，因为hash值有可能为负数，而&amp;0x7FFFFFFF后，只有符号外改变，而后面的位都不变。</li>
</ol>
]]></content:encoded>
      
      <comments>http://yoursite.com/posts/645/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HashMap源码剖析</title>
      <link>http://yoursite.com/posts/41456/</link>
      <guid>http://yoursite.com/posts/41456/</guid>
      <pubDate>Wed, 26 Apr 2017 13:22:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;HashMap简介&lt;br&gt;   HashMap是基于哈希表实现的，每一个元素都是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阈值）时，同样会自动增长。&lt;/p&gt;
&lt;p&gt;HashMap是非线程安全的，只是用于单线程环境下，多线程环境下可以采用conc
      
      </description>
      
      <content:encoded><![CDATA[<p>HashMap简介<br>   HashMap是基于哈希表实现的，每一个元素都是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阈值）时，同样会自动增长。</p>
<p>HashMap是非线程安全的，只是用于单线程环境下，多线程环境下可以采用concurrent并发包下的concurrentHashMap。</p>
<p>HashMap实现了Serializable接口，因此它支持序列化，实现了Cloneable接口，能被克隆。</p>
<p>###HashMap源码剖析</p>
<p>HashMap的源码如下（加入了比较详细的注释）：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.util;    </div><div class="line"><span class="keyword">import</span> java.io.*;    </div><div class="line">   </div><div class="line"><span class="keyword">public</span> class <span class="keyword">HashMap</span>&lt;K,V&gt;    </div><div class="line">    extends AbstractMap&lt;K,V&gt;    </div><div class="line">    implements Map&lt;K,V&gt;, Cloneable, Serializable    </div><div class="line">&#123;    </div><div class="line">   </div><div class="line">    <span class="comment">// 默认的初始容量（容量为HashMap中槽的数目）是16，且实际容量必须是2的整数次幂。    </span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// 最大容量（必须是2的幂且小于2的30次方，传入容量过大将被这个值替换）    </span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// 默认加载因子为0.75   </span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75</span>f;    </div><div class="line">   </div><div class="line">    <span class="comment">// 存储数据的Entry数组，长度是2的幂。    </span></div><div class="line">    <span class="comment">// HashMap采用链表法解决冲突，每一个Entry本质上是一个单向链表    </span></div><div class="line">    <span class="keyword">transient</span> Entry[] table;    </div><div class="line">   </div><div class="line">    <span class="comment">// HashMap的底层数组中已用槽的数量    </span></div><div class="line">    <span class="keyword">transient</span> <span class="built_in">int</span> <span class="built_in">size</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// HashMap的阈值，用于判断是否需要调整HashMap的容量（threshold = 容量*加载因子）    </span></div><div class="line">    <span class="built_in">int</span> threshold;    </div><div class="line">   </div><div class="line">    <span class="comment">// 加载因子实际大小    </span></div><div class="line">    <span class="keyword">final</span> <span class="built_in">float</span> loadFactor;    </div><div class="line">   </div><div class="line">    <span class="comment">// HashMap被改变的次数    </span></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="built_in">int</span> modCount;    </div><div class="line">   </div><div class="line">    <span class="comment">// 指定“容量大小”和“加载因子”的构造函数    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">HashMap</span>(<span class="built_in">int</span> initialCapacity, <span class="built_in">float</span> loadFactor) &#123;    </div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +    </div><div class="line">                                               initialCapacity);    </div><div class="line">        <span class="comment">// HashMap的最大容量只能是MAXIMUM_CAPACITY    </span></div><div class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)    </div><div class="line">            initialCapacity = MAXIMUM_CAPACITY;    </div><div class="line">        <span class="comment">//加载因此不能小于0  </span></div><div class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +    </div><div class="line">                                               loadFactor);    </div><div class="line">   </div><div class="line">        <span class="comment">// 找出“大于initialCapacity”的最小的2的幂    </span></div><div class="line">        <span class="built_in">int</span> capacity = <span class="number">1</span>;    </div><div class="line">        <span class="keyword">while</span> (capacity &lt; initialCapacity)    </div><div class="line">            capacity &lt;&lt;= <span class="number">1</span>;    </div><div class="line">   </div><div class="line">        <span class="comment">// 设置“加载因子”    </span></div><div class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;    </div><div class="line">        <span class="comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。    </span></div><div class="line">        threshold = (<span class="built_in">int</span>)(capacity * loadFactor);    </div><div class="line">        <span class="comment">// 创建Entry数组，用来保存数据    </span></div><div class="line">        table = <span class="keyword">new</span> Entry[capacity];    </div><div class="line">        init();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="comment">// 指定“容量大小”的构造函数    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">HashMap</span>(<span class="built_in">int</span> initialCapacity) &#123;    </div><div class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 默认构造函数。    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">HashMap</span>() &#123;    </div><div class="line">        <span class="comment">// 设置“加载因子”为默认加载因子0.75    </span></div><div class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;    </div><div class="line">        <span class="comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。    </span></div><div class="line">        threshold = (<span class="built_in">int</span>)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);    </div><div class="line">        <span class="comment">// 创建Entry数组，用来保存数据    </span></div><div class="line">        table = <span class="keyword">new</span> Entry[DEFAULT_INITIAL_CAPACITY];    </div><div class="line">        init();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 包含“子Map”的构造函数    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">HashMap</span>(Map&lt;? extends K, ? extends V&gt; m) &#123;    </div><div class="line">        <span class="keyword">this</span>(Math.<span class="built_in">max</span>((<span class="built_in">int</span>) (m.<span class="built_in">size</span>() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>,    </div><div class="line">                      DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);    </div><div class="line">        <span class="comment">// 将m中的全部元素逐个添加到HashMap中    </span></div><div class="line">        putAllForCreate(m);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">//求hash值的方法，重新计算hash值  </span></div><div class="line">    <span class="keyword">static</span> <span class="built_in">int</span> hash(<span class="built_in">int</span> h) &#123;    </div><div class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);    </div><div class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回h在数组中的索引值，这里用&amp;代替取模，旨在提升效率   </span></div><div class="line">    <span class="comment">// h &amp; (length-1)保证返回值的小于length    </span></div><div class="line">    <span class="keyword">static</span> <span class="built_in">int</span> indexFor(<span class="built_in">int</span> h, <span class="built_in">int</span> length) &#123;    </div><div class="line">        <span class="keyword">return</span> h &amp; (length<span class="number">-1</span>);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="built_in">size</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> isEmpty() &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="built_in">size</span> == <span class="number">0</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 获取key对应的value    </span></div><div class="line">    <span class="keyword">public</span> V <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;    </div><div class="line">        <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>)    </div><div class="line">            <span class="keyword">return</span> getForNullKey();    </div><div class="line">        <span class="comment">// 获取key的hash值    </span></div><div class="line">        <span class="built_in">int</span> hash = hash(<span class="built_in">key</span>.hashCode());    </div><div class="line">        <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素    </span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];    </div><div class="line">             e != <span class="keyword">null</span>;    </div><div class="line">             e = e.next) &#123;    </div><div class="line">            <span class="keyword">Object</span> k;    </div><div class="line">            <span class="comment">//判断key是否相同  </span></div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || <span class="built_in">key</span>.equals(k)))    </div><div class="line">                <span class="keyword">return</span> e.value;    </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">//没找到则返回null  </span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 获取“key为null”的元素的值    </span></div><div class="line">    <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！    </span></div><div class="line">    <span class="keyword">private</span> V getForNullKey() &#123;    </div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;    </div><div class="line">            <span class="keyword">if</span> (e.<span class="built_in">key</span> == <span class="keyword">null</span>)    </div><div class="line">                <span class="keyword">return</span> e.value;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// HashMap是否包含key    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> containsKey(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;    </div><div class="line">        <span class="keyword">return</span> getEntry(<span class="built_in">key</span>) != <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回“键为key”的键值对    </span></div><div class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; getEntry(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;    </div><div class="line">        <span class="comment">// 获取哈希值    </span></div><div class="line">        <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，“key不为null”的则调用hash()计算哈希值    </span></div><div class="line">        <span class="built_in">int</span> hash = (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(<span class="built_in">key</span>.hashCode());    </div><div class="line">        <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素    </span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];    </div><div class="line">             e != <span class="keyword">null</span>;    </div><div class="line">             e = e.next) &#123;    </div><div class="line">            <span class="keyword">Object</span> k;    </div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;    </div><div class="line">                ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))    </div><div class="line">                <span class="keyword">return</span> e;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将“key-value”添加到HashMap中    </span></div><div class="line">    <span class="keyword">public</span> V put(K <span class="built_in">key</span>, V value) &#123;    </div><div class="line">        <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。    </span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>)    </div><div class="line">            <span class="keyword">return</span> putForNullKey(value);    </div><div class="line">        <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。    </span></div><div class="line">        <span class="built_in">int</span> hash = hash(<span class="built_in">key</span>.hashCode());    </div><div class="line">        <span class="built_in">int</span> i = indexFor(hash, table.length);    </div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;    </div><div class="line">            <span class="keyword">Object</span> k;    </div><div class="line">            <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！    </span></div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || <span class="built_in">key</span>.equals(k))) &#123;    </div><div class="line">                V oldValue = e.value;    </div><div class="line">                e.value = value;    </div><div class="line">                e.recordAccess(<span class="keyword">this</span>);    </div><div class="line">                <span class="keyword">return</span> oldValue;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中    </span></div><div class="line">        modCount++;  </div><div class="line">        <span class="comment">//将key-value添加到table[i]处  </span></div><div class="line">        addEntry(hash, <span class="built_in">key</span>, value, i);    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// putForNullKey()的作用是将“key为null”键值对添加到table[0]位置    </span></div><div class="line">    <span class="keyword">private</span> V putForNullKey(V value) &#123;    </div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;    </div><div class="line">            <span class="keyword">if</span> (e.<span class="built_in">key</span> == <span class="keyword">null</span>) &#123;    </div><div class="line">                V oldValue = e.value;    </div><div class="line">                e.value = value;    </div><div class="line">                e.recordAccess(<span class="keyword">this</span>);    </div><div class="line">                <span class="keyword">return</span> oldValue;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="comment">// 如果没有存在key为null的键值对，则直接题阿见到table[0]处!    </span></div><div class="line">        modCount++;    </div><div class="line">        addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 创建HashMap对应的“添加方法”，    </span></div><div class="line">    <span class="comment">// 它和put()不同。putForCreate()是内部方法，它被构造函数等调用，用来创建HashMap    </span></div><div class="line">    <span class="comment">// 而put()是对外提供的往HashMap中添加元素的方法。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> putForCreate(K <span class="built_in">key</span>, V value) &#123;    </div><div class="line">        <span class="built_in">int</span> hash = (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(<span class="built_in">key</span>.hashCode());    </div><div class="line">        <span class="built_in">int</span> i = indexFor(hash, table.length);    </div><div class="line">   </div><div class="line">        <span class="comment">// 若该HashMap表中存在“键值等于key”的元素，则替换该元素的value值    </span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;    </div><div class="line">            <span class="keyword">Object</span> k;    </div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;    </div><div class="line">                ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k)))) &#123;    </div><div class="line">                e.value = value;    </div><div class="line">                <span class="keyword">return</span>;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 若该HashMap表中不存在“键值等于key”的元素，则将该key-value添加到HashMap中    </span></div><div class="line">        createEntry(hash, <span class="built_in">key</span>, value, i);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将“m”中的全部元素都添加到HashMap中。    </span></div><div class="line">    <span class="comment">// 该方法被内部的构造HashMap的方法所调用。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> putAllForCreate(Map&lt;? extends K, ? extends V&gt; m) &#123;    </div><div class="line">        <span class="comment">// 利用迭代器将元素逐个添加到HashMap中    </span></div><div class="line">        <span class="keyword">for</span> (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) &#123;    </div><div class="line">            Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();    </div><div class="line">            putForCreate(e.getKey(), e.getValue());    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 重新调整HashMap的大小，newCapacity是调整后的容量    </span></div><div class="line">    <span class="keyword">void</span> resize(<span class="built_in">int</span> newCapacity) &#123;    </div><div class="line">        Entry[] oldTable = table;    </div><div class="line">        <span class="built_in">int</span> oldCapacity = oldTable.length;   </div><div class="line">        <span class="comment">//如果就容量已经达到了最大值，则不能再扩容，直接返回  </span></div><div class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;    </div><div class="line">            threshold = Integer.MAX_VALUE;    </div><div class="line">            <span class="keyword">return</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中，    </span></div><div class="line">        <span class="comment">// 然后，将“新HashMap”赋值给“旧HashMap”。    </span></div><div class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];    </div><div class="line">        transfer(newTable);    </div><div class="line">        table = newTable;    </div><div class="line">        threshold = (<span class="built_in">int</span>)(newCapacity * loadFactor);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将HashMap中的全部元素都添加到newTable中    </span></div><div class="line">    <span class="keyword">void</span> transfer(Entry[] newTable) &#123;    </div><div class="line">        Entry[] src = table;    </div><div class="line">        <span class="built_in">int</span> newCapacity = newTable.length;    </div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;    </div><div class="line">            Entry&lt;K,V&gt; e = src[j];    </div><div class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;    </div><div class="line">                src[j] = <span class="keyword">null</span>;    </div><div class="line">                do &#123;    </div><div class="line">                    Entry&lt;K,V&gt; next = e.next;    </div><div class="line">                    <span class="built_in">int</span> i = indexFor(e.hash, newCapacity);    </div><div class="line">                    e.next = newTable[i];    </div><div class="line">                    newTable[i] = e;    </div><div class="line">                    e = next;    </div><div class="line">                &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将"m"的全部元素都添加到HashMap中    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> putAll(Map&lt;? extends K, ? extends V&gt; m) &#123;    </div><div class="line">        <span class="comment">// 有效性判断    </span></div><div class="line">        <span class="built_in">int</span> numKeysToBeAdded = m.<span class="built_in">size</span>();    </div><div class="line">        <span class="keyword">if</span> (numKeysToBeAdded == <span class="number">0</span>)    </div><div class="line">            <span class="keyword">return</span>;    </div><div class="line">   </div><div class="line">        <span class="comment">// 计算容量是否足够，    </span></div><div class="line">        <span class="comment">// 若“当前阀值容量 &lt; 需要的容量”，则将容量x2。    </span></div><div class="line">        <span class="keyword">if</span> (numKeysToBeAdded &gt; threshold) &#123;    </div><div class="line">            <span class="built_in">int</span> targetCapacity = (<span class="built_in">int</span>)(numKeysToBeAdded / loadFactor + <span class="number">1</span>);    </div><div class="line">            <span class="keyword">if</span> (targetCapacity &gt; MAXIMUM_CAPACITY)    </div><div class="line">                targetCapacity = MAXIMUM_CAPACITY;    </div><div class="line">            <span class="built_in">int</span> newCapacity = table.length;    </div><div class="line">            <span class="keyword">while</span> (newCapacity &lt; targetCapacity)    </div><div class="line">                newCapacity &lt;&lt;= <span class="number">1</span>;    </div><div class="line">            <span class="keyword">if</span> (newCapacity &gt; table.length)    </div><div class="line">                resize(newCapacity);    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 通过迭代器，将“m”中的元素逐个添加到HashMap中。    </span></div><div class="line">        <span class="keyword">for</span> (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) &#123;    </div><div class="line">            Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();    </div><div class="line">            put(e.getKey(), e.getValue());    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除“键为key”元素    </span></div><div class="line">    <span class="keyword">public</span> V remove(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;    </div><div class="line">        Entry&lt;K,V&gt; e = removeEntryForKey(<span class="built_in">key</span>);    </div><div class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除“键为key”的元素    </span></div><div class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; removeEntryForKey(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;    </div><div class="line">        <span class="comment">// 获取哈希值。若key为null，则哈希值为0；否则调用hash()进行计算    </span></div><div class="line">        <span class="built_in">int</span> hash = (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(<span class="built_in">key</span>.hashCode());    </div><div class="line">        <span class="built_in">int</span> i = indexFor(hash, table.length);    </div><div class="line">        Entry&lt;K,V&gt; prev = table[i];    </div><div class="line">        Entry&lt;K,V&gt; e = prev;    </div><div class="line">   </div><div class="line">        <span class="comment">// 删除链表中“键为key”的元素    </span></div><div class="line">        <span class="comment">// 本质是“删除单向链表中的节点”    </span></div><div class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;    </div><div class="line">            Entry&lt;K,V&gt; next = e.next;    </div><div class="line">            <span class="keyword">Object</span> k;    </div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;    </div><div class="line">                ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k)))) &#123;    </div><div class="line">                modCount++;    </div><div class="line">                <span class="built_in">size</span>--;    </div><div class="line">                <span class="keyword">if</span> (prev == e)    </div><div class="line">                    table[i] = next;    </div><div class="line">                <span class="keyword">else</span>   </div><div class="line">                    prev.next = next;    </div><div class="line">                e.recordRemoval(<span class="keyword">this</span>);    </div><div class="line">                <span class="keyword">return</span> e;    </div><div class="line">            &#125;    </div><div class="line">            prev = e;    </div><div class="line">            e = next;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">return</span> e;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除“键值对”    </span></div><div class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; removeMapping(<span class="keyword">Object</span> o) &#123;    </div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">   </div><div class="line">        Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;    </div><div class="line">        <span class="keyword">Object</span> <span class="built_in">key</span> = entry.getKey();    </div><div class="line">        <span class="built_in">int</span> hash = (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(<span class="built_in">key</span>.hashCode());    </div><div class="line">        <span class="built_in">int</span> i = indexFor(hash, table.length);    </div><div class="line">        Entry&lt;K,V&gt; prev = table[i];    </div><div class="line">        Entry&lt;K,V&gt; e = prev;    </div><div class="line">   </div><div class="line">        <span class="comment">// 删除链表中的“键值对e”    </span></div><div class="line">        <span class="comment">// 本质是“删除单向链表中的节点”    </span></div><div class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;    </div><div class="line">            Entry&lt;K,V&gt; next = e.next;    </div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; e.equals(entry)) &#123;    </div><div class="line">                modCount++;    </div><div class="line">                <span class="built_in">size</span>--;    </div><div class="line">                <span class="keyword">if</span> (prev == e)    </div><div class="line">                    table[i] = next;    </div><div class="line">                <span class="keyword">else</span>   </div><div class="line">                    prev.next = next;    </div><div class="line">                e.recordRemoval(<span class="keyword">this</span>);    </div><div class="line">                <span class="keyword">return</span> e;    </div><div class="line">            &#125;    </div><div class="line">            prev = e;    </div><div class="line">            e = next;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">return</span> e;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 清空HashMap，将所有的元素设为null    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() &#123;    </div><div class="line">        modCount++;    </div><div class="line">        Entry[] tab = table;    </div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tab.length; i++)    </div><div class="line">            tab[i] = <span class="keyword">null</span>;    </div><div class="line">        <span class="built_in">size</span> = <span class="number">0</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 是否包含“值为value”的元素    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> containsValue(<span class="keyword">Object</span> value) &#123;    </div><div class="line">    <span class="comment">// 若“value为null”，则调用containsNullValue()查找    </span></div><div class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)    </div><div class="line">            <span class="keyword">return</span> containsNullValue();    </div><div class="line">   </div><div class="line">    <span class="comment">// 若“value不为null”，则查找HashMap中是否有值为value的节点。    </span></div><div class="line">    Entry[] tab = table;    </div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)    </div><div class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)    </div><div class="line">                <span class="keyword">if</span> (value.equals(e.value))    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 是否包含null值    </span></div><div class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> containsNullValue() &#123;    </div><div class="line">    Entry[] tab = table;    </div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)    </div><div class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)    </div><div class="line">                <span class="keyword">if</span> (e.value == <span class="keyword">null</span>)    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 克隆一个HashMap，并返回Object对象    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> clone() &#123;    </div><div class="line">        <span class="keyword">HashMap</span>&lt;K,V&gt; result = <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">try</span> &#123;    </div><div class="line">            result = (<span class="keyword">HashMap</span>&lt;K,V&gt;)<span class="keyword">super</span>.clone();    </div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;    </div><div class="line">            <span class="comment">// assert false;    </span></div><div class="line">        &#125;    </div><div class="line">        result.table = <span class="keyword">new</span> Entry[table.length];    </div><div class="line">        result.entrySet = <span class="keyword">null</span>;    </div><div class="line">        result.modCount = <span class="number">0</span>;    </div><div class="line">        result.<span class="built_in">size</span> = <span class="number">0</span>;    </div><div class="line">        result.init();    </div><div class="line">        <span class="comment">// 调用putAllForCreate()将全部元素添加到HashMap中    </span></div><div class="line">        result.putAllForCreate(<span class="keyword">this</span>);    </div><div class="line">   </div><div class="line">        <span class="keyword">return</span> result;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Entry是单向链表。    </span></div><div class="line">    <span class="comment">// 它是 “HashMap链式存储法”对应的链表。    </span></div><div class="line">    <span class="comment">// 它实现了Map.Entry 接口，即实现getKey(), getValue(), setValue(V value), equals(Object o), hashCode()这些函数    </span></div><div class="line">    <span class="keyword">static</span> class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;    </div><div class="line">        <span class="keyword">final</span> K <span class="built_in">key</span>;    </div><div class="line">        V value;    </div><div class="line">        <span class="comment">// 指向下一个节点    </span></div><div class="line">        Entry&lt;K,V&gt; next;    </div><div class="line">        <span class="keyword">final</span> <span class="built_in">int</span> hash;    </div><div class="line">   </div><div class="line">        <span class="comment">// 构造函数。    </span></div><div class="line">        <span class="comment">// 输入参数包括"哈希值(h)", "键(k)", "值(v)", "下一节点(n)"    </span></div><div class="line">        Entry(<span class="built_in">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;    </div><div class="line">            value = v;    </div><div class="line">            next = n;    </div><div class="line">            <span class="built_in">key</span> = k;    </div><div class="line">            hash = h;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> K getKey() &#123;    </div><div class="line">            <span class="keyword">return</span> <span class="built_in">key</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V getValue() &#123;    </div><div class="line">            <span class="keyword">return</span> value;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V setValue(V newValue) &#123;    </div><div class="line">            V oldValue = value;    </div><div class="line">            value = newValue;    </div><div class="line">            <span class="keyword">return</span> oldValue;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 判断两个Entry是否相等    </span></div><div class="line">        <span class="comment">// 若两个Entry的“key”和“value”都相等，则返回true。    </span></div><div class="line">        <span class="comment">// 否则，返回false    </span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="built_in">boolean</span> equals(<span class="keyword">Object</span> o) &#123;    </div><div class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">            Map.Entry e = (Map.Entry)o;    </div><div class="line">            <span class="keyword">Object</span> k1 = getKey();    </div><div class="line">            <span class="keyword">Object</span> k2 = e.getKey();    </div><div class="line">            <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;    </div><div class="line">                <span class="keyword">Object</span> v1 = getValue();    </div><div class="line">                <span class="keyword">Object</span> v2 = e.getValue();    </div><div class="line">                <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))    </div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">            &#125;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 实现hashCode()    </span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="built_in">int</span> hashCode() &#123;    </div><div class="line">            <span class="keyword">return</span> (<span class="built_in">key</span>==<span class="keyword">null</span>   ? <span class="number">0</span> : <span class="built_in">key</span>.hashCode()) ^    </div><div class="line">                   (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">String</span> toString() &#123;    </div><div class="line">            <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 当向HashMap中添加元素时，绘调用recordAccess()。    </span></div><div class="line">        <span class="comment">// 这里不做任何处理    </span></div><div class="line">        <span class="keyword">void</span> recordAccess(<span class="keyword">HashMap</span>&lt;K,V&gt; m) &#123;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 当从HashMap中删除元素时，绘调用recordRemoval()。    </span></div><div class="line">        <span class="comment">// 这里不做任何处理    </span></div><div class="line">        <span class="keyword">void</span> recordRemoval(<span class="keyword">HashMap</span>&lt;K,V&gt; m) &#123;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。    </span></div><div class="line">    <span class="keyword">void</span> addEntry(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">int</span> bucketIndex) &#123;    </div><div class="line">        <span class="comment">// 保存“bucketIndex”位置的值到“e”中    </span></div><div class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];    </div><div class="line">        <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，    </span></div><div class="line">        <span class="comment">// 设置“e”为“新Entry的下一个节点”    </span></div><div class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, <span class="built_in">key</span>, value, e);    </div><div class="line">        <span class="comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小    </span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">size</span>++ &gt;= threshold)    </div><div class="line">            resize(<span class="number">2</span> * table.length);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 创建Entry。将“key-value”插入指定位置。    </span></div><div class="line">    <span class="keyword">void</span> createEntry(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">int</span> bucketIndex) &#123;    </div><div class="line">        <span class="comment">// 保存“bucketIndex”位置的值到“e”中    </span></div><div class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];    </div><div class="line">        <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，    </span></div><div class="line">        <span class="comment">// 设置“e”为“新Entry的下一个节点”    </span></div><div class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, <span class="built_in">key</span>, value, e);    </div><div class="line">        <span class="built_in">size</span>++;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// HashIterator是HashMap迭代器的抽象出来的父类，实现了公共了函数。    </span></div><div class="line">    <span class="comment">// 它包含“key迭代器(KeyIterator)”、“Value迭代器(ValueIterator)”和“Entry迭代器(EntryIterator)”3个子类。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">abstract</span> class HashIterator&lt;E&gt; implements Iterator&lt;E&gt; &#123;    </div><div class="line">        <span class="comment">// 下一个元素    </span></div><div class="line">        Entry&lt;K,V&gt; next;    </div><div class="line">        <span class="comment">// expectedModCount用于实现fast-fail机制。    </span></div><div class="line">        <span class="built_in">int</span> expectedModCount;    </div><div class="line">        <span class="comment">// 当前索引    </span></div><div class="line">        <span class="built_in">int</span> index;    </div><div class="line">        <span class="comment">// 当前元素    </span></div><div class="line">        Entry&lt;K,V&gt; current;    </div><div class="line">   </div><div class="line">        HashIterator() &#123;    </div><div class="line">            expectedModCount = modCount;    </div><div class="line">            <span class="keyword">if</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry    </span></div><div class="line">                Entry[] t = table;    </div><div class="line">                <span class="comment">// 将next指向table中第一个不为null的元素。    </span></div><div class="line">                <span class="comment">// 这里利用了index的初始值为0，从0开始依次向后遍历，直到找到不为null的元素就退出循环。    </span></div><div class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)    </div><div class="line">                    ;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="built_in">boolean</span> hasNext() &#123;    </div><div class="line">            <span class="keyword">return</span> next != <span class="keyword">null</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 获取下一个元素    </span></div><div class="line">        <span class="keyword">final</span> Entry&lt;K,V&gt; nextEntry() &#123;    </div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </div><div class="line">            Entry&lt;K,V&gt; e = next;    </div><div class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </div><div class="line">   </div><div class="line">            <span class="comment">// 注意！！！    </span></div><div class="line">            <span class="comment">// 一个Entry就是一个单向链表    </span></div><div class="line">            <span class="comment">// 若该Entry的下一个节点不为空，就将next指向下一个节点;    </span></div><div class="line">            <span class="comment">// 否则，将next指向下一个链表(也是下一个Entry)的不为null的节点。    </span></div><div class="line">            <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;    </div><div class="line">                Entry[] t = table;    </div><div class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)    </div><div class="line">                    ;    </div><div class="line">            &#125;    </div><div class="line">            current = e;    </div><div class="line">            <span class="keyword">return</span> e;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 删除当前元素    </span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> remove() &#123;    </div><div class="line">            <span class="keyword">if</span> (current == <span class="keyword">null</span>)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();    </div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)    </div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </div><div class="line">            <span class="keyword">Object</span> k = current.<span class="built_in">key</span>;    </div><div class="line">            current = <span class="keyword">null</span>;    </div><div class="line">            <span class="keyword">HashMap</span>.<span class="keyword">this</span>.removeEntryForKey(k);    </div><div class="line">            expectedModCount = modCount;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// value的迭代器    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> class ValueIterator extends HashIterator&lt;V&gt; &#123;    </div><div class="line">        <span class="keyword">public</span> V next() &#123;    </div><div class="line">            <span class="keyword">return</span> nextEntry().value;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// key的迭代器    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> class KeyIterator extends HashIterator&lt;K&gt; &#123;    </div><div class="line">        <span class="keyword">public</span> K next() &#123;    </div><div class="line">            <span class="keyword">return</span> nextEntry().getKey();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Entry的迭代器    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> class EntryIterator extends HashIterator&lt;Map.Entry&lt;K,V&gt;&gt; &#123;    </div><div class="line">        <span class="keyword">public</span> Map.Entry&lt;K,V&gt; next() &#123;    </div><div class="line">            <span class="keyword">return</span> nextEntry();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回一个“key迭代器”    </span></div><div class="line">    Iterator&lt;K&gt; newKeyIterator()   &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator();    </div><div class="line">    &#125;    </div><div class="line">    <span class="comment">// 返回一个“value迭代器”    </span></div><div class="line">    Iterator&lt;V&gt; newValueIterator()   &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator();    </div><div class="line">    &#125;    </div><div class="line">    <span class="comment">// 返回一个“entry迭代器”    </span></div><div class="line">    Iterator&lt;Map.Entry&lt;K,V&gt;&gt; newEntryIterator()   &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// HashMap的Entry对应的集合    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = <span class="keyword">null</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回“key的集合”，实际上返回一个“KeySet对象”    </span></div><div class="line">    <span class="keyword">public</span> Set&lt;K&gt; keySet() &#123;    </div><div class="line">        Set&lt;K&gt; ks = keySet;    </div><div class="line">        <span class="keyword">return</span> (ks != <span class="keyword">null</span> ? ks : (keySet = <span class="keyword">new</span> KeySet()));    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// Key对应的集合    </span></div><div class="line">    <span class="comment">// KeySet继承于AbstractSet，说明该集合中没有重复的Key。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> class KeySet extends AbstractSet&lt;K&gt; &#123;    </div><div class="line">        <span class="keyword">public</span> Iterator&lt;K&gt; iterator() &#123;    </div><div class="line">            <span class="keyword">return</span> newKeyIterator();    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;    </div><div class="line">            <span class="keyword">return</span> <span class="built_in">size</span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> o) &#123;    </div><div class="line">            <span class="keyword">return</span> containsKey(o);    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> o) &#123;    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">HashMap</span>.<span class="keyword">this</span>.removeEntryForKey(o) != <span class="keyword">null</span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() &#123;    </div><div class="line">            <span class="keyword">HashMap</span>.<span class="keyword">this</span>.<span class="built_in">clear</span>();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回“value集合”，实际上返回的是一个Values对象    </span></div><div class="line">    <span class="keyword">public</span> Collection&lt;V&gt; values() &#123;    </div><div class="line">        Collection&lt;V&gt; vs = values;    </div><div class="line">        <span class="keyword">return</span> (vs != <span class="keyword">null</span> ? vs : (values = <span class="keyword">new</span> Values()));    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// “value集合”    </span></div><div class="line">    <span class="comment">// Values继承于AbstractCollection，不同于“KeySet继承于AbstractSet”，    </span></div><div class="line">    <span class="comment">// Values中的元素能够重复。因为不同的key可以指向相同的value。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> class Values extends AbstractCollection&lt;V&gt; &#123;    </div><div class="line">        <span class="keyword">public</span> Iterator&lt;V&gt; iterator() &#123;    </div><div class="line">            <span class="keyword">return</span> newValueIterator();    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;    </div><div class="line">            <span class="keyword">return</span> <span class="built_in">size</span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> o) &#123;    </div><div class="line">            <span class="keyword">return</span> containsValue(o);    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() &#123;    </div><div class="line">            <span class="keyword">HashMap</span>.<span class="keyword">this</span>.<span class="built_in">clear</span>();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回“HashMap的Entry集合”    </span></div><div class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;    </div><div class="line">        <span class="keyword">return</span> entrySet0();    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回“HashMap的Entry集合”，它实际是返回一个EntrySet对象    </span></div><div class="line">    <span class="keyword">private</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet0() &#123;    </div><div class="line">        Set&lt;Map.Entry&lt;K,V&gt;&gt; es = entrySet;    </div><div class="line">        <span class="keyword">return</span> es != <span class="keyword">null</span> ? es : (entrySet = <span class="keyword">new</span> EntrySet());    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// EntrySet对应的集合    </span></div><div class="line">    <span class="comment">// EntrySet继承于AbstractSet，说明该集合中没有重复的EntrySet。    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> class EntrySet extends AbstractSet&lt;Map.Entry&lt;K,V&gt;&gt; &#123;    </div><div class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;    </div><div class="line">            <span class="keyword">return</span> newEntryIterator();    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> o) &#123;    </div><div class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">            Map.Entry&lt;K,V&gt; e = (Map.Entry&lt;K,V&gt;) o;    </div><div class="line">            Entry&lt;K,V&gt; candidate = getEntry(e.getKey());    </div><div class="line">            <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> o) &#123;    </div><div class="line">            <span class="keyword">return</span> removeMapping(o) != <span class="keyword">null</span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;    </div><div class="line">            <span class="keyword">return</span> <span class="built_in">size</span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() &#123;    </div><div class="line">            <span class="keyword">HashMap</span>.<span class="keyword">this</span>.<span class="built_in">clear</span>();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// java.io.Serializable的写入函数    </span></div><div class="line">    <span class="comment">// 将HashMap的“总的容量，实际容量，所有的Entry”都写入到输出流中    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream s)    </div><div class="line">        <span class="keyword">throws</span> IOException    </div><div class="line">    &#123;    </div><div class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i =    </div><div class="line">            (<span class="built_in">size</span> &gt; <span class="number">0</span>) ? entrySet0().iterator() : <span class="keyword">null</span>;    </div><div class="line">   </div><div class="line">        <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff    </span></div><div class="line">        s.defaultWriteObject();    </div><div class="line">   </div><div class="line">        <span class="comment">// Write out number of buckets    </span></div><div class="line">        s.writeInt(table.length);    </div><div class="line">   </div><div class="line">        <span class="comment">// Write out size (number of Mappings)    </span></div><div class="line">        s.writeInt(<span class="built_in">size</span>);    </div><div class="line">   </div><div class="line">        <span class="comment">// Write out keys and values (alternating)    </span></div><div class="line">        <span class="keyword">if</span> (i != <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">while</span> (i.hasNext()) &#123;    </div><div class="line">            Map.Entry&lt;K,V&gt; e = i.next();    </div><div class="line">            s.writeObject(e.getKey());    </div><div class="line">            s.writeObject(e.getValue());    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265</span>L;    </div><div class="line">   </div><div class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出    </span></div><div class="line">    <span class="comment">// 将HashMap的“总的容量，实际容量，所有的Entry”依次读出    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)    </div><div class="line">         <span class="keyword">throws</span> IOException, ClassNotFoundException    </div><div class="line">    &#123;    </div><div class="line">        <span class="comment">// Read in the threshold, loadfactor, and any hidden stuff    </span></div><div class="line">        s.defaultReadObject();    </div><div class="line">   </div><div class="line">        <span class="comment">// Read in number of buckets and allocate the bucket array;    </span></div><div class="line">        <span class="built_in">int</span> numBuckets = s.readInt();    </div><div class="line">        table = <span class="keyword">new</span> Entry[numBuckets];    </div><div class="line">   </div><div class="line">        init();  <span class="comment">// Give subclass a chance to do its thing.    </span></div><div class="line">   </div><div class="line">        <span class="comment">// Read in size (number of Mappings)    </span></div><div class="line">        <span class="built_in">int</span> <span class="built_in">size</span> = s.readInt();    </div><div class="line">   </div><div class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap    </span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++) &#123;    </div><div class="line">            K <span class="built_in">key</span> = (K) s.readObject();    </div><div class="line">            V value = (V) s.readObject();    </div><div class="line">            putForCreate(<span class="built_in">key</span>, value);    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回“HashMap总的容量”    </span></div><div class="line">    <span class="built_in">int</span>   capacity()     &#123; <span class="keyword">return</span> table.length; &#125;    </div><div class="line">    <span class="comment">// 返回“HashMap的加载因子”    </span></div><div class="line">    <span class="built_in">float</span> loadFactor()   &#123; <span class="keyword">return</span> loadFactor;   &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###几点总结<br>1、首先要清楚HashMap的存储结构，如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20140701191403764?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbnNfY29kZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>图中，紫色部分即代表哈希表，也称为哈希数组，数组的每个元素都是一个单链表的头节点，链表是用来解决冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中。</p>
<p>2、首先看链表中节点的数据结构：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Entry是单向链表。    </span></div><div class="line"><span class="comment">// 它是 “HashMap链式存储法”对应的链表。    </span></div><div class="line"><span class="comment">// 它实现了Map.Entry 接口，即实现getKey(), getValue(), setValue(V value), equals(Object o), hashCode()这些函数    </span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;    </div><div class="line">    <span class="keyword">final</span> K key;    </div><div class="line">    V value;    </div><div class="line">    <span class="comment">// 指向下一个节点    </span></div><div class="line">    Entry&lt;K,V&gt; next;    </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;    </div><div class="line">  </div><div class="line">    <span class="comment">// 构造函数。    </span></div><div class="line">    <span class="comment">// 输入参数包括"哈希值(h)", "键(k)", "值(v)", "下一节点(n)"    </span></div><div class="line">    Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;    </div><div class="line">        value = v;    </div><div class="line">        next = n;    </div><div class="line">        key = k;    </div><div class="line">        hash = h;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function">K <span class="title">getKey</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> key;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function">V <span class="title">getValue</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> value;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function">V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;    </div><div class="line">        V oldValue = value;    </div><div class="line">        value = newValue;    </div><div class="line">        <span class="keyword">return</span> oldValue;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="comment">// 判断两个Entry是否相等    </span></div><div class="line">    <span class="comment">// 若两个Entry的“key”和“value”都相等，则返回true。    </span></div><div class="line">    <span class="comment">// 否则，返回false    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;    </div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">        Map.Entry e = (Map.Entry)o;    </div><div class="line">        Object k1 = getKey();    </div><div class="line">        Object k2 = e.getKey();    </div><div class="line">        <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;    </div><div class="line">            Object v1 = getValue();    </div><div class="line">            Object v2 = e.getValue();    </div><div class="line">            <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="comment">// 实现hashCode()    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> (key==<span class="keyword">null</span>   ? <span class="number">0</span> : key.hashCode()) ^    </div><div class="line">               (value==<span class="keyword">null</span> ? 0 : value.hashCode());    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function">String <span class="title">toString</span><span class="params">()</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="comment">// 当向HashMap中添加元素时，绘调用recordAccess()。    </span></div><div class="line">    <span class="comment">// 这里不做任何处理    </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="comment">// 当从HashMap中删除元素时，绘调用recordRemoval()。    </span></div><div class="line">    <span class="comment">// 这里不做任何处理    </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它的结构元素除了key、value、hash外，还有next，next指向下一个节点。另外，这里覆写了equals和hashCode方法来保证键值对的独一无二。</p>
<p>3、HashMap共有四个构造方法。构造方法中提到了两个很重要的参数：初始容量和加载因子。这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中槽的数量（即哈希数组的长度），初始容量是创建哈希表时的容量（从构造函数中可以看出，如果不指明，则默认为16），加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度，当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 resize 操作（即扩容）。</p>
<p>下面说下加载因子，如果加载因子越大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）；如果加载因子太小，那么表中的数据将过于稀疏（很多空间还没用，就开始扩容了），对空间造成严重浪费。如果我们在构造方法中不指定，则系统默认加载因子为0.75，这是一个比较理想的值，一般情况下我们是无需修改的。</p>
<p>另外，无论我们指定的容量为多少，构造方法都会将实际容量设为不小于指定容量的2的次方的一个数，且最大值不能超过2的30次方</p>
<p>4、HashMap中key和value都允许为null。</p>
<p>5、要重点分析下HashMap中用的最多的两个方法put和get。先从比较简单的get方法着手，源码如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取key对应的value    </span></div><div class="line"><span class="keyword">public</span> V <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;    </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>)    </div><div class="line">        <span class="keyword">return</span> getForNullKey();    </div><div class="line">    <span class="comment">// 获取key的hash值    </span></div><div class="line">    <span class="built_in">int</span> hash = hash(<span class="built_in">key</span>.hashCode());    </div><div class="line">    <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素    </span></div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];    </div><div class="line">         e != <span class="keyword">null</span>;    </div><div class="line">         e = e.next) &#123;    </div><div class="line">        <span class="keyword">Object</span> k;    </div><div class="line">/判断<span class="built_in">key</span>是否相同  </div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || <span class="built_in">key</span>.equals(k)))    </div><div class="line">            <span class="keyword">return</span> e.value;    </div><div class="line">    &#125;  </div><div class="line">没找到则返回<span class="keyword">null</span>  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">&#125;    </div><div class="line">  </div><div class="line"><span class="comment">// 获取“key为null”的元素的值    </span></div><div class="line"><span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！    </span></div><div class="line"><span class="keyword">private</span> V getForNullKey() &#123;    </div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;    </div><div class="line">        <span class="keyword">if</span> (e.<span class="built_in">key</span> == <span class="keyword">null</span>)    </div><div class="line">            <span class="keyword">return</span> e.value;    </div><div class="line">    &#125;    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，如果key为null，则直接从哈希表的第一个位置table[0]对应的链表上查找。记住，key为null的键值对永远都放在以table[0]为头结点的链表中，当然不一定是存放在头结点table[0]中。</p>
<p>如果key不为null，则先求的key的hash值，根据hash值找到在table中的索引，在该索引对应的单链表中查找是否有键值对的key与目标key相等，有就返回对应的value，没有则返回null。</p>
<p>put方法稍微复杂些，代码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// 将“key-value”添加到HashMap中    </span></div><div class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">put</span>(<span class="params">K key, V <span class="keyword">value</span></span>) </span>&#123;    </div><div class="line">      <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。    </span></div><div class="line">      <span class="keyword">if</span> (key == <span class="literal">null</span>)    </div><div class="line">          <span class="keyword">return</span> putForNullKey(<span class="keyword">value</span>);    </div><div class="line">      <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。    </span></div><div class="line">      <span class="keyword">int</span> hash = hash(key.hashCode());    </div><div class="line">      <span class="keyword">int</span> i = indexFor(hash, table.length);    </div><div class="line">      <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;    </div><div class="line">          Object k;    </div><div class="line">          <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！    </span></div><div class="line">          <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.<span class="keyword">equals</span>(k))) &#123;    </div><div class="line">              V oldValue = e.<span class="keyword">value</span>;    </div><div class="line">              e.<span class="keyword">value</span> = <span class="keyword">value</span>;    </div><div class="line">              e.recordAccess(<span class="keyword">this</span>);    </div><div class="line">              <span class="keyword">return</span> oldValue;    </div><div class="line">          &#125;    </div><div class="line">      &#125;    </div><div class="line">  </div><div class="line">      <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中    </span></div><div class="line">      modCount++;  </div><div class="line"><span class="comment">//将key-value添加到table[i]处  </span></div><div class="line">      addEntry(hash, key, <span class="keyword">value</span>, i);    </div><div class="line">      <span class="keyword">return</span> <span class="literal">null</span>;    </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p> 如果key为null，则将其添加到table[0]对应的链表中，putForNullKey的源码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// putForNullKey()的作用是将“key为null”键值对添加到table[0]位置    </span></div><div class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span>(<span class="params">V <span class="keyword">value</span></span>) </span>&#123;    </div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="literal">null</span>; e = e.next) &#123;    </div><div class="line">        <span class="keyword">if</span> (e.key == <span class="literal">null</span>) &#123;    </div><div class="line">            V oldValue = e.<span class="keyword">value</span>;    </div><div class="line">            e.<span class="keyword">value</span> = <span class="keyword">value</span>;    </div><div class="line">            e.recordAccess(<span class="keyword">this</span>);    </div><div class="line">            <span class="keyword">return</span> oldValue;    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">    <span class="comment">// 如果没有存在key为null的键值对，则直接题阿见到table[0]处!    </span></div><div class="line">    modCount++;    </div><div class="line">    addEntry(<span class="number">0</span>, <span class="literal">null</span>, <span class="keyword">value</span>, <span class="number">0</span>);    </div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果key不为null，则同样先求出key的hash值，根据hash值得出在table中的索引，而后遍历对应的单链表，如果单链表中存在与目标key相等的键值对，则将新的value覆盖旧的value，比将旧的value返回，如果找不到与目标key相等的键值对，或者该单链表为空，则将该键值对插入到改单链表的头结点位置（每次新插入的节点都是放在头结点的位置），该操作是有addEntry方法实现的，它的源码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。    </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span>(<span class="params"><span class="keyword">int</span> hash, K key, V <span class="keyword">value</span>, <span class="keyword">int</span> bucketIndex</span>) </span>&#123;    </div><div class="line">    <span class="comment">// 保存“bucketIndex”位置的值到“e”中    </span></div><div class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];    </div><div class="line">    <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，    </span></div><div class="line">    <span class="comment">// 设置“e”为“新Entry的下一个节点”    </span></div><div class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, <span class="keyword">value</span>, e);    </div><div class="line">    <span class="comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小    </span></div><div class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)    </div><div class="line">        resize(<span class="number">2</span> * table.length);    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意这里倒数第三行的构造方法，将key-value键值对赋给table[bucketIndex]，并将其next指向元素e，这便将key-value放到了头结点中，并将之前的头结点接在了它的后面。该方法也说明，每次put键值对的时候，总是将新的该键值对放在table[bucketIndex]处（即头结点处）。</p>
<p>两外注意最后两行代码，每次加入键值对时，都要判断当前已用的槽的数目是否大于等于阀值（容量*加载因子），如果大于等于，则进行扩容，将容量扩为原来容量的2倍。</p>
<p>6、关于扩容。上面我们看到了扩容的方法，resize方法，它的源码如下：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 重新调整HashMap的大小，newCapacity是调整后的单位    </span></div><div class="line">void resize(int <span class="keyword">new</span><span class="type">Capacity</span>) &#123;    </div><div class="line">    Entry[] oldTable = table;    </div><div class="line">    int oldCapacity = oldTable.length;    </div><div class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;    </div><div class="line">        threshold = Integer.MAX_VALUE;    </div><div class="line">        <span class="keyword">return</span>;    </div><div class="line">    &#125;    </div><div class="line">  </div><div class="line">    <span class="comment">// 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中，    </span></div><div class="line">    <span class="comment">// 然后，将“新HashMap”赋值给“旧HashMap”。    </span></div><div class="line">    Entry[] <span class="keyword">new</span><span class="type">Table</span> = <span class="keyword">new</span> <span class="type">Entry</span>[<span class="keyword">new</span><span class="type">Capacity</span>];    </div><div class="line">    transfer(<span class="keyword">new</span><span class="type">Table</span>);    </div><div class="line">    table = <span class="keyword">new</span><span class="type">Table</span>;    </div><div class="line">    threshold = (int)(<span class="keyword">new</span><span class="type">Capacity</span> * loadFactor);    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 很明显，是新建了一个HashMap的底层数组，而后调用transfer方法，将就HashMap的全部元素添加到新的HashMap中（要重新计算元素在新的数组中的索引位置）。transfer方法的源码如下：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将HashMap中的全部元素都添加到newTable中    </span></div><div class="line">void transfer(Entry[] <span class="keyword">new</span><span class="type">Table</span>) &#123;    </div><div class="line">    Entry[] src = table;    </div><div class="line">    int <span class="keyword">new</span><span class="type">Capacity</span> = <span class="keyword">new</span><span class="type">Table</span>.length;    </div><div class="line">    <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; src.length; j++) &#123;    </div><div class="line">        Entry&lt;K,V&gt; e = src[j];    </div><div class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;    </div><div class="line">            src[j] = <span class="literal">null</span>;    </div><div class="line">            <span class="keyword">do</span> &#123;    </div><div class="line">                Entry&lt;K,V&gt; next = e.next;    </div><div class="line">                int i = indexFor(e.hash, <span class="keyword">new</span><span class="type">Capacity</span>);    </div><div class="line">                e.next = <span class="keyword">new</span><span class="type">Table</span>[i];    </div><div class="line">                <span class="keyword">new</span><span class="type">Table</span>[i] = e;    </div><div class="line">                e = next;    </div><div class="line">            &#125; <span class="keyword">while</span> (e != <span class="literal">null</span>);    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很明显，扩容是一个相当耗时的操作，因为它需要重新计算这些元素在新的数组中的位置并进行复制处理。因此，我们在用HashMap的时，最好能提前预估下HashMap中元素的个数，这样有助于提高HashMap的性能。</p>
<p>7、注意containsKey方法和containsValue方法。前者直接可以通过key的哈希值将搜索范围定位到指定索引对应的链表，而后者要对哈希数组的每个链表进行搜索。</p>
<p>8、我们重点来分析下求hash值和索引值的方法，这两个方法便是HashMap设计的最为核心的部分，二者结合能保证哈希表中的元素尽可能均匀地散列。</p>
<p>计算哈希值的方法如下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">static</span> int hash(int h) &#123;  </div><div class="line">        <span class="attribute">h</span><span class="regexp"> ^=</span> (h &gt;&gt;&gt; <span class="number">20</span>)<span class="regexp"> ^</span> (h &gt;&gt;&gt; <span class="number">12</span>);  </div><div class="line">        <span class="attribute">return</span> h<span class="regexp"> ^</span> (h &gt;&gt;&gt; <span class="number">7</span>)<span class="regexp"> ^</span> (h &gt;&gt;&gt; <span class="number">4</span>);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>它只是一个数学公式，IDK这样设计对hash值的计算，自然有它的好处，至于为什么这样设计，我们这里不去追究，只要明白一点，用的位的操作使hash值的计算效率很高。</p>
<p>由hash值找到对应索引的方法如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> h &amp; (length<span class="number">-1</span>);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这个我们要重点说下，我们一般对哈希表的散列很自然地会想到用hash值对length取模（即除法散列法），Hashtable中也是这样实现的，这种方法基本能保证元素在哈希表中散列的比较均匀，但取模会用到除法运算，效率很低，HashMap中则通过h&amp;(length-1)的方法来代替取模，同样实现了均匀的散列，但效率要高很多，这也是HashMap对Hashtable的一个改进。</p>
<p>接下来，我们分析下为什么哈希表的容量一定要是2的整数次幂。首先，length为2的整数次幂的话，h&amp;(length-1)就相当于对length取模，这样便保证了散列的均匀，同时也提升了效率；其次，length为2的整数次幂的话，为偶数，这样length-1为奇数，奇数的最后一位是1，这样便保证了h&amp;(length-1)的最后一位可能为0，也可能为1（这取决于h的值），即与后的结果可能为偶数，也可能为奇数，这样便可以保证散列的均匀性，而如果length为奇数的话，很明显length-1为偶数，它的最后一位是0，这样h&amp;(length-1)的最后一位肯定为0，即只能为偶数，这样任何hash值都只会被散列到数组的偶数下标位置上，这便浪费了近一半的空间，因此，length取2的整数次幂，是为了使不同hash值发生碰撞的概率较小，这样就能使元素在哈希表中均匀地散列。</p>
]]></content:encoded>
      
      <comments>http://yoursite.com/posts/41456/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ArrayList源码剖析</title>
      <link>http://yoursite.com/posts/33869/</link>
      <guid>http://yoursite.com/posts/33869/</guid>
      <pubDate>Wed, 26 Apr 2017 13:21:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;ArrayList简介&lt;/p&gt;
&lt;p&gt;ArrayList是基于数组实现的，是一个动态数组，其容量能自动增长，类似于C语言中的动态申请内存，动态增长内存。&lt;/p&gt;
&lt;p&gt;ArrayList不是线程安全的，只能在单线程环境下，多线程环境下可以考虑用collections.syn
      
      </description>
      
      <content:encoded><![CDATA[<p>ArrayList简介</p>
<p>ArrayList是基于数组实现的，是一个动态数组，其容量能自动增长，类似于C语言中的动态申请内存，动态增长内存。</p>
<p>ArrayList不是线程安全的，只能在单线程环境下，多线程环境下可以考虑用collections.synchronizedList(List l)函数返回一个线程安全的ArrayList类，也可以使用concurrent并发包下的CopyOnWriteArrayList类。</p>
<p> ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了RandomAccess接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了Cloneable接口，能被克隆。</p>
<p>ArrayList源码剖析</p>
<p>ArrayList的源码如下（加入了比较详细的注释）：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.util;    </div><div class="line">   </div><div class="line"><span class="keyword">public</span> class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;    </div><div class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable    </div><div class="line">&#123;    </div><div class="line">    <span class="comment">// 序列版本号    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189</span>L;    </div><div class="line">   </div><div class="line">    <span class="comment">// ArrayList基于该数组实现，用该数组保存数据   </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">Object</span>[] elementData;    </div><div class="line">   </div><div class="line">    <span class="comment">// ArrayList中实际数据的数量    </span></div><div class="line">    <span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">size</span>;    </div><div class="line">   </div><div class="line">    <span class="comment">// ArrayList带容量大小的构造函数。    </span></div><div class="line">    <span class="keyword">public</span> ArrayList(<span class="built_in">int</span> initialCapacity) &#123;    </div><div class="line">        <span class="keyword">super</span>();    </div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+    </div><div class="line">                                               initialCapacity);    </div><div class="line">        <span class="comment">// 新建一个数组    </span></div><div class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> <span class="keyword">Object</span>[initialCapacity];    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// ArrayList无参构造函数。默认容量是10。    </span></div><div class="line">    <span class="keyword">public</span> ArrayList() &#123;    </div><div class="line">        <span class="keyword">this</span>(<span class="number">10</span>);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 创建一个包含collection的ArrayList    </span></div><div class="line">    <span class="keyword">public</span> ArrayList(Collection&lt;? extends E&gt; c) &#123;    </div><div class="line">        elementData = c.toArray();    </div><div class="line">        <span class="built_in">size</span> = elementData.length;    </div><div class="line">        <span class="keyword">if</span> (elementData.getClass() != <span class="keyword">Object</span>[].class)    </div><div class="line">            elementData = Arrays.copyOf(elementData, <span class="built_in">size</span>, <span class="keyword">Object</span>[].class);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="comment">// 将当前容量值设为实际元素个数    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> trimToSize() &#123;    </div><div class="line">        modCount++;    </div><div class="line">        <span class="built_in">int</span> oldCapacity = elementData.length;    </div><div class="line">        <span class="keyword">if</span> (<span class="built_in">size</span> &lt; oldCapacity) &#123;    </div><div class="line">            elementData = Arrays.copyOf(elementData, <span class="built_in">size</span>);    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="comment">// 确定ArrarList的容量。    </span></div><div class="line">    <span class="comment">// 若ArrayList的容量不足以容纳当前的全部元素，设置 新的容量=“(原始容量x3)/2 + 1”    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> ensureCapacity(<span class="built_in">int</span> minCapacity) &#123;    </div><div class="line">        <span class="comment">// 将“修改统计数”+1，该变量主要是用来实现fail-fast机制的    </span></div><div class="line">        modCount++;    </div><div class="line">        <span class="built_in">int</span> oldCapacity = elementData.length;    </div><div class="line">        <span class="comment">// 若当前容量不足以容纳当前的元素个数，设置 新的容量=“(原始容量x3)/2 + 1”    </span></div><div class="line">        <span class="keyword">if</span> (minCapacity &gt; oldCapacity) &#123;    </div><div class="line">            <span class="keyword">Object</span> oldData[] = elementData;    </div><div class="line">            <span class="built_in">int</span> newCapacity = (oldCapacity * <span class="number">3</span>)/<span class="number">2</span> + <span class="number">1</span>;    </div><div class="line">            <span class="comment">//如果还不够，则直接将minCapacity设置为当前容量  </span></div><div class="line">            <span class="keyword">if</span> (newCapacity &lt; minCapacity)    </div><div class="line">                newCapacity = minCapacity;    </div><div class="line">            elementData = Arrays.copyOf(elementData, newCapacity);    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 添加元素e    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;    </div><div class="line">        <span class="comment">// 确定ArrayList的容量大小    </span></div><div class="line">        ensureCapacity(<span class="built_in">size</span> + <span class="number">1</span>);  <span class="comment">// Increments modCount!!    </span></div><div class="line">        <span class="comment">// 添加e到ArrayList中    </span></div><div class="line">        elementData[<span class="built_in">size</span>++] = e;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回ArrayList的实际大小    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">size</span>() &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="built_in">size</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// ArrayList是否包含Object(o)    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> contains(<span class="keyword">Object</span> o) &#123;    </div><div class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">//返回ArrayList是否为空    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> isEmpty() &#123;    </div><div class="line">        <span class="keyword">return</span> <span class="built_in">size</span> == <span class="number">0</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 正向查找，返回元素的索引值    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> indexOf(<span class="keyword">Object</span> o) &#123;    </div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)    </div><div class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)    </div><div class="line">                <span class="keyword">return</span> i;    </div><div class="line">            &#125; <span class="keyword">else</span> &#123;    </div><div class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)    </div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))    </div><div class="line">                    <span class="keyword">return</span> i;    </div><div class="line">            &#125;    </div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">        <span class="comment">// 反向查找，返回元素的索引值    </span></div><div class="line">        <span class="keyword">public</span> <span class="built_in">int</span> lastIndexOf(<span class="keyword">Object</span> o) &#123;    </div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="built_in">size</span><span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)    </div><div class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)    </div><div class="line">                <span class="keyword">return</span> i;    </div><div class="line">        &#125; <span class="keyword">else</span> &#123;    </div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="built_in">size</span><span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)    </div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))    </div><div class="line">                <span class="keyword">return</span> i;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 反向查找(从数组末尾向开始查找)，返回元素(o)的索引值    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> lastIndexOf(<span class="keyword">Object</span> o) &#123;    </div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="built_in">size</span><span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)    </div><div class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)    </div><div class="line">                <span class="keyword">return</span> i;    </div><div class="line">        &#125; <span class="keyword">else</span> &#123;    </div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="built_in">size</span><span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)    </div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))    </div><div class="line">                <span class="keyword">return</span> i;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </div><div class="line">    &#125;    </div><div class="line">     </div><div class="line">   </div><div class="line">    <span class="comment">// 返回ArrayList的Object数组    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span>[] toArray() &#123;    </div><div class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, <span class="built_in">size</span>);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 返回ArrayList元素组成的数组  </span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;    </div><div class="line">        <span class="comment">// 若数组a的大小 &lt; ArrayList的元素个数；    </span></div><div class="line">        <span class="comment">// 则新建一个T[]数组，数组大小是“ArrayList的元素个数”，并将“ArrayList”全部拷贝到新数组中    </span></div><div class="line">        <span class="keyword">if</span> (a.length &lt; <span class="built_in">size</span>)    </div><div class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, <span class="built_in">size</span>, a.getClass());    </div><div class="line">   </div><div class="line">        <span class="comment">// 若数组a的大小 &gt;= ArrayList的元素个数；    </span></div><div class="line">        <span class="comment">// 则将ArrayList的全部元素都拷贝到数组a中。    </span></div><div class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, <span class="built_in">size</span>);    </div><div class="line">        <span class="keyword">if</span> (a.length &gt; <span class="built_in">size</span>)    </div><div class="line">            a[<span class="built_in">size</span>] = <span class="keyword">null</span>;    </div><div class="line">        <span class="keyword">return</span> a;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 获取index位置的元素值    </span></div><div class="line">    <span class="keyword">public</span> E <span class="built_in">get</span>(<span class="built_in">int</span> index) &#123;    </div><div class="line">        RangeCheck(index);    </div><div class="line">   </div><div class="line">        <span class="keyword">return</span> (E) elementData[index];    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 设置index位置的值为element    </span></div><div class="line">    <span class="keyword">public</span> E <span class="built_in">set</span>(<span class="built_in">int</span> index, E element) &#123;    </div><div class="line">        RangeCheck(index);    </div><div class="line">   </div><div class="line">        E oldValue = (E) elementData[index];    </div><div class="line">        elementData[index] = element;    </div><div class="line">        <span class="keyword">return</span> oldValue;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将e添加到ArrayList中    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;    </div><div class="line">        ensureCapacity(<span class="built_in">size</span> + <span class="number">1</span>);  <span class="comment">// Increments modCount!!    </span></div><div class="line">        elementData[<span class="built_in">size</span>++] = e;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将e添加到ArrayList的指定位置    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> index, E element) &#123;    </div><div class="line">        <span class="keyword">if</span> (index &gt; <span class="built_in">size</span> || index &lt; <span class="number">0</span>)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(    </div><div class="line">            <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+<span class="built_in">size</span>);    </div><div class="line">   </div><div class="line">        ensureCapacity(<span class="built_in">size</span>+<span class="number">1</span>);  <span class="comment">// Increments modCount!!    </span></div><div class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,    </div><div class="line">             <span class="built_in">size</span> - index);    </div><div class="line">        elementData[index] = element;    </div><div class="line">        <span class="built_in">size</span>++;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除ArrayList指定位置的元素    </span></div><div class="line">    <span class="keyword">public</span> E remove(<span class="built_in">int</span> index) &#123;    </div><div class="line">        RangeCheck(index);    </div><div class="line">   </div><div class="line">        modCount++;    </div><div class="line">        E oldValue = (E) elementData[index];    </div><div class="line">   </div><div class="line">        <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - index - <span class="number">1</span>;    </div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)    </div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,    </div><div class="line">                 numMoved);    </div><div class="line">        elementData[--<span class="built_in">size</span>] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work    </span></div><div class="line">   </div><div class="line">        <span class="keyword">return</span> oldValue;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除ArrayList的指定元素    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> o) &#123;    </div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;    </div><div class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; <span class="built_in">size</span>; index++)    </div><div class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;    </div><div class="line">                fastRemove(index);    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">            &#125;    </div><div class="line">        &#125; <span class="keyword">else</span> &#123;    </div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; <span class="built_in">size</span>; index++)    </div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;    </div><div class="line">                fastRemove(index);    </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="comment">// 快速删除第index个元素    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> fastRemove(<span class="built_in">int</span> index) &#123;    </div><div class="line">        modCount++;    </div><div class="line">        <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - index - <span class="number">1</span>;    </div><div class="line">        <span class="comment">// 从"index+1"开始，用后面的元素替换前面的元素。    </span></div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)    </div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,    </div><div class="line">                             numMoved);    </div><div class="line">        <span class="comment">// 将最后一个元素设为null    </span></div><div class="line">        elementData[--<span class="built_in">size</span>] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work    </span></div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除元素    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> o) &#123;    </div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;    </div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; <span class="built_in">size</span>; index++)    </div><div class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;    </div><div class="line">                fastRemove(index);    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">            &#125;    </div><div class="line">        &#125; <span class="keyword">else</span> &#123;    </div><div class="line">            <span class="comment">// 便利ArrayList，找到“元素o”，则删除，并返回true。    </span></div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; <span class="built_in">size</span>; index++)    </div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;    </div><div class="line">                fastRemove(index);    </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;    </div><div class="line">            &#125;    </div><div class="line">        &#125;    </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 清空ArrayList，将全部的元素设为null    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">clear</span>() &#123;    </div><div class="line">        modCount++;    </div><div class="line">   </div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)    </div><div class="line">            elementData[i] = <span class="keyword">null</span>;    </div><div class="line">   </div><div class="line">        <span class="built_in">size</span> = <span class="number">0</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 将集合c追加到ArrayList中    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> addAll(Collection&lt;? extends E&gt; c) &#123;    </div><div class="line">        <span class="keyword">Object</span>[] a = c.toArray();    </div><div class="line">        <span class="built_in">int</span> numNew = a.length;    </div><div class="line">        ensureCapacity(<span class="built_in">size</span> + numNew);  <span class="comment">// Increments modCount    </span></div><div class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, <span class="built_in">size</span>, numNew);    </div><div class="line">        <span class="built_in">size</span> += numNew;    </div><div class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 从index位置开始，将集合c添加到ArrayList    </span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> addAll(<span class="built_in">int</span> index, Collection&lt;? extends E&gt; c) &#123;    </div><div class="line">        <span class="keyword">if</span> (index &gt; <span class="built_in">size</span> || index &lt; <span class="number">0</span>)    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(    </div><div class="line">            <span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + <span class="built_in">size</span>);    </div><div class="line">   </div><div class="line">        <span class="keyword">Object</span>[] a = c.toArray();    </div><div class="line">        <span class="built_in">int</span> numNew = a.length;    </div><div class="line">        ensureCapacity(<span class="built_in">size</span> + numNew);  <span class="comment">// Increments modCount    </span></div><div class="line">   </div><div class="line">        <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - index;    </div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)    </div><div class="line">            System.arraycopy(elementData, index, elementData, index + numNew,    </div><div class="line">                 numMoved);    </div><div class="line">   </div><div class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);    </div><div class="line">        <span class="built_in">size</span> += numNew;    </div><div class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="comment">// 删除fromIndex到toIndex之间的全部元素。    </span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> removeRange(<span class="built_in">int</span> fromIndex, <span class="built_in">int</span> toIndex) &#123;    </div><div class="line">    modCount++;    </div><div class="line">    <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - toIndex;    </div><div class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,    </div><div class="line">                         numMoved);    </div><div class="line">   </div><div class="line">    <span class="comment">// Let gc do its work    </span></div><div class="line">    <span class="built_in">int</span> newSize = <span class="built_in">size</span> - (toIndex-fromIndex);    </div><div class="line">    <span class="keyword">while</span> (<span class="built_in">size</span> != newSize)    </div><div class="line">        elementData[--<span class="built_in">size</span>] = <span class="keyword">null</span>;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> RangeCheck(<span class="built_in">int</span> index) &#123;    </div><div class="line">    <span class="keyword">if</span> (index &gt;= <span class="built_in">size</span>)    </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(    </div><div class="line">        <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+<span class="built_in">size</span>);    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="comment">// 克隆函数    </span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> clone() &#123;    </div><div class="line">        <span class="keyword">try</span> &#123;    </div><div class="line">            ArrayList&lt;E&gt; v = (ArrayList&lt;E&gt;) <span class="keyword">super</span>.clone();    </div><div class="line">            <span class="comment">// 将当前ArrayList的全部元素拷贝到v中    </span></div><div class="line">            v.elementData = Arrays.copyOf(elementData, <span class="built_in">size</span>);    </div><div class="line">            v.modCount = <span class="number">0</span>;    </div><div class="line">            <span class="keyword">return</span> v;    </div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;    </div><div class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable    </span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();    </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="comment">// java.io.Serializable的写入函数    </span></div><div class="line">    <span class="comment">// 将ArrayList的“容量，所有的元素值”都写入到输出流中    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream s)    </div><div class="line">        <span class="keyword">throws</span> java.io.IOException&#123;    </div><div class="line">    <span class="comment">// Write out element count, and any hidden stuff    </span></div><div class="line">    <span class="built_in">int</span> expectedModCount = modCount;    </div><div class="line">    s.defaultWriteObject();    </div><div class="line">   </div><div class="line">        <span class="comment">// 写入“数组的容量”    </span></div><div class="line">        s.writeInt(elementData.length);    </div><div class="line">   </div><div class="line">    <span class="comment">// 写入“数组的每一个元素”    </span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++)    </div><div class="line">            s.writeObject(elementData[i]);    </div><div class="line">   </div><div class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;    </div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </div><div class="line">        &#125;    </div><div class="line">   </div><div class="line">    &#125;    </div><div class="line">   </div><div class="line">   </div><div class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出    </span></div><div class="line">    <span class="comment">// 先将ArrayList的“容量”读出，然后将“所有的元素值”读出    </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)    </div><div class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;    </div><div class="line">        <span class="comment">// Read in size, and any hidden stuff    </span></div><div class="line">        s.defaultReadObject();    </div><div class="line">   </div><div class="line">        <span class="comment">// 从输入流中读取ArrayList的“容量”    </span></div><div class="line">        <span class="built_in">int</span> arrayLength = s.readInt();    </div><div class="line">        <span class="keyword">Object</span>[] a = elementData = <span class="keyword">new</span> <span class="keyword">Object</span>[arrayLength];    </div><div class="line">   </div><div class="line">        <span class="comment">// 从输入流中将“所有的元素值”读出    </span></div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++)    </div><div class="line">            a[i] = s.readObject();    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##几点总结</p>
<p>关于ArrayList的源码，给出几点比较重要的总结：</p>
<ol>
<li>注意其三个不同的构造方法。无参构造方法构造的ArrayList的容量默认为10，带有Collection参数的构造方法，将Collection转化为数组赋给ArrayList的实现数组elementData。</li>
<li>注意扩充容量的方法ensureCapacity。ArrayList在每次增加元素（可能是1个，也可能是一组）时，都要调用该方法来确保足够的容量。当容量不足以容纳当前的元素个数时，就设置新的容量为旧的容量的1.5倍加1，如果设置后的新容量还不够，则直接新容量设置为传入的参数（也就是所需的容量），而后用Arrays.copyof()方法将元素拷贝到新的数组（详见下面的第3点）。从中可以看出，当容量不够时，每次增加元素，都要将原来的元素拷贝到一个新的数组中，非常之耗时，也因此建议在事先能确定元素数量的情况下，才使用ArrayList，否则建议使用LinkedList。</li>
<li>ArrayList的实现中大量地调用了Arrays.copyof()和System.arraycopy()方法。我们有必要对这两个方法的实现做下深入的了解。</li>
</ol>
<p>首先来看Arrays.copyof()方法。它有很多个重载的方法，但实现思路都是一样的，我们来看泛型版本的源码：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] copyOf(T[] original, int <span class="keyword">new</span><span class="type">Length</span>) &#123;  </div><div class="line">    <span class="keyword">return</span> (T[]) copyOf(original, <span class="keyword">new</span><span class="type">Length</span>, original.getClass());  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很明显调用了另一个copyof方法，该方法有三个参数，最后一个参数指明要转换的数据的类型，其源码如下：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, int <span class="keyword">new</span><span class="type">Length</span>, Class&lt;? extends T[]&gt; <span class="keyword">new</span><span class="type">Type</span>) &#123;  </div><div class="line">    T[] copy = ((Object)<span class="keyword">new</span><span class="type">Type</span> == (Object)Object[].class)  </div><div class="line">        ? (T[]) <span class="keyword">new</span> <span class="type">Object</span>[<span class="keyword">new</span><span class="type">Length</span>]  </div><div class="line">        : <span class="type"></span>(T[]) <span class="keyword">Array</span>.<span class="keyword">new</span><span class="type">Instance</span>(<span class="keyword">new</span><span class="type">Type</span>.getComponentType(), <span class="keyword">new</span><span class="type">Length</span>);  </div><div class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,  </div><div class="line">                     Math.min(original.length, <span class="keyword">new</span><span class="type">Length</span>));  </div><div class="line">    <span class="keyword">return</span> copy;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里可以很明显地看出，该方法实际上是在其内部又创建了一个长度为newlength的数组，调用System.arraycopy()方法，将原来数组中的元素复制到了新的数组中。</p>
<p>下面来看System.arraycopy()方法。该方法被标记了native，调用了系统的C/C++代码，在JDK中是看不到的，但在openJDK中可以看到其源码。该函数实际上最终调用了C语言的memmove()函数，因此它可以保证同一个数组内元素的正确复制和移动，比一般的复制方法的实现效率要高很多，很适合用来批量处理数组。Java强烈推荐在复制大量数组元素时用该方法，以取得更高的效率。</p>
<ol>
<li>注意ArrayList的两个转化为静态数组的toArray方法。</li>
</ol>
<p>第一个，Object[] toArray()方法。该方法有可能会抛出java.lang.ClassCastException异常，如果直接用向下转型的方法，将整个ArrayList集合转变为指定类型的Array数组，便会抛出该异常，而如果转化为Array数组时不向下转型，而是将每个元素向下转型，则不会抛出该异常，显然对数组中的元素一个个进行向下转型，效率不高，且不太方便。</p>
<p>第二个，<t> T[] toArray(T[] a)方法。该方法可以直接将ArrayList转换得到的Array进行整体向下转型（转型其实是在该方法的源码中实现的），且从该方法的源码中可以看出，参数a的大小不足时，内部会调用Arrays.copyOf方法，该方法内部创建一个新的数组返回，因此对该方法的常用形式如下：</t></p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer[] vectorToArray2(ArrayList&lt;Integer&gt; v) &#123;    </div><div class="line">    Integer[] <span class="keyword">new</span><span class="type">Text</span> = (Integer[])v.toArray(<span class="keyword">new</span> <span class="type">Integer</span>[<span class="number">0</span>]);    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Text</span>;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5.ArrayList基于数组实现，可以通过下标索引直接查找到指定位置的元素，因此查找效率高，但每次插入或删除元素，就要大量地移动元素，插入删除元素的效率低。</p>
<p>6.在查找给定元素索引值等的方法中，源码都将该元素的值分为null和不为null两种情况处理，ArrayList中允许元素为null。</p>
]]></content:encoded>
      
      <comments>http://yoursite.com/posts/33869/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[笔记]算法复习笔记---栈、队列、链表（下）</title>
      <link>http://yoursite.com/posts/63850/</link>
      <guid>http://yoursite.com/posts/63850/</guid>
      <pubDate>Wed, 26 Apr 2017 12:22:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;链表&lt;/p&gt;
&lt;p&gt;链表的数据结构与栈和队列有所不同，栈和队列都是申请一段连续的存储空间，然后按照顺序存储。而链表是一种在物理上非连续、非顺序的存储结构，数组元素的申请是通过每个元素的指针来联系起来的。&lt;/p&gt;
&lt;p&gt;链表分为两种：单向链表和双向链表。我们平时说的，一般是指
      
      </description>
      
      <content:encoded><![CDATA[<p>链表</p>
<p>链表的数据结构与栈和队列有所不同，栈和队列都是申请一段连续的存储空间，然后按照顺序存储。而链表是一种在物理上非连续、非顺序的存储结构，数组元素的申请是通过每个元素的指针来联系起来的。</p>
<p>链表分为两种：单向链表和双向链表。我们平时说的，一般是指单向链表，链表在每个节点除了存储数据之外，还额外存储两个指针，分别指向前一个节点，和后一个节点。</p>
<p><strong>链表的代码实现：</strong></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Node</span> &#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> data;</div><div class="line">	<span class="keyword">private</span> Node next;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> data;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span>(<span class="params"><span class="keyword">int</span> data</span>) </span>&#123;</div><div class="line">		<span class="keyword">this</span>.data = data;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> next;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span>(<span class="params">Node next</span>) </span>&#123;</div><div class="line">		<span class="keyword">this</span>.next = next;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Link &#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">size</span> = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Node first;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Node last;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Link() &#123;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 链表尾部插入</div><div class="line">	 * @param data</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> addLast(<span class="keyword">int</span> data) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">size</span> == <span class="number">0</span>) &#123;</div><div class="line">			<span class="comment">//为空的时候初始化前后元素</span></div><div class="line">			fillStart(data);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			Node node = <span class="keyword">new</span> Node();</div><div class="line">			node.setData(data);</div><div class="line">			last.setNext(node);</div><div class="line">			last = node;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">size</span> ++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 链表头部插入</div><div class="line">	 * @param data</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> addFirst(<span class="keyword">int</span> data) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">size</span> == <span class="number">0</span>) &#123;</div><div class="line">			fillStart(data);</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			Node node = <span class="keyword">new</span> Node();</div><div class="line">			node.setData(data);</div><div class="line">			node.setNext(first);</div><div class="line">			first = node;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">size</span> ++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 从链表指定位置后面插入</div><div class="line">	 * @param data 插入的数据</div><div class="line">	 * @param index 下标从0开始</div><div class="line">	 */</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> add(<span class="keyword">int</span> data,<span class="keyword">int</span> index) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">size</span> &gt; index) &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">size</span> == <span class="number">0</span>) &#123;</div><div class="line">				<span class="comment">//为空初始化前后数组</span></div><div class="line">				fillStart(data);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</div><div class="line">				addFirst(data);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">size</span> == index + <span class="number">1</span> ) &#123;</div><div class="line">				addLast(data);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				Node temp = getIndex(index);</div><div class="line">				Node node = <span class="keyword">new</span> Node();</div><div class="line">				node.setData(data);</div><div class="line">				node.setNext(temp.getNext());</div><div class="line">				temp.setNext(node);</div><div class="line">				<span class="keyword">size</span> ++;</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"链表没有那么长"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除链表头元素</div><div class="line">	 */</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> removeFirst() &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">size</span> == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"链表没有元素"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">size</span>  == <span class="number">1</span>) &#123;</div><div class="line">			<span class="comment">//只剩下一个元素时，需要清除first和last</span></div><div class="line">			clear();</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			Node temp = first;</div><div class="line">			first = temp.getNext();</div><div class="line">			temp = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">size</span> -- ;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除链表尾部元素</div><div class="line">	 */</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> removeLast() &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">size</span> == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"链表没有元素"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">size</span> == <span class="number">1</span>) &#123;</div><div class="line">			clear();</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			Node temp = getIndex(<span class="keyword">size</span> - <span class="number">2</span>);</div><div class="line">			temp.setNext(<span class="keyword">null</span>);</div><div class="line">			<span class="keyword">size</span> --;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除链表中间元素</div><div class="line">	 * @param index</div><div class="line">	 */</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> removeMiddle(<span class="keyword">int</span> index) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">size</span> == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"链表没有元素"</span>);</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">size</span> == <span class="number">1</span>) &#123;</div><div class="line">			clear();</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</div><div class="line">				removeFirst();</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">size</span> == index -<span class="number">1</span>) &#123;</div><div class="line">				removeLast();</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				Node temp = getIndex(index - <span class="number">1</span>);</div><div class="line">				Node <span class="keyword">next</span> = temp.getNext();</div><div class="line">				temp.setNext(<span class="keyword">next</span>.getNext());</div><div class="line">				<span class="keyword">next</span> = <span class="keyword">null</span>;</div><div class="line">				<span class="keyword">size</span> --;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> printAll() &#123;</div><div class="line">		<span class="comment">//当然，可以换成 do...while实现</span></div><div class="line">		Node temp = first;</div><div class="line">		System.out.<span class="keyword">println</span>(temp.getData());</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">size</span> - <span class="number">1</span>; i++) &#123;</div><div class="line">			temp = temp.getNext();</div><div class="line">			System.out.<span class="keyword">println</span>(temp.getData());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">void</span> clear() &#123;</div><div class="line">		first = <span class="keyword">null</span>;</div><div class="line">		last = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">size</span> = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取指定下标元素</div><div class="line">	 * @param index</div><div class="line">	 */</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Node getIndex(<span class="keyword">int</span> index) &#123;</div><div class="line">		Node temp =first;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</div><div class="line">			temp = temp.getNext();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> temp;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 再链表中插入第一个元素时，头和尾都是一个元素</div><div class="line">	 * @param data </div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">void</span> fillStart(<span class="keyword">int</span> data) &#123;</div><div class="line">		first = <span class="keyword">new</span> Node();</div><div class="line">		first.setData(data);</div><div class="line">		last = first;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">size</span>() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">size</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 反转链表</div><div class="line">	 */</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">reverse</span>() &#123;</div><div class="line">		Node temp = first;</div><div class="line">		last = temp;</div><div class="line">		Node <span class="keyword">next</span> =first.getNext();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">size</span> - <span class="number">1</span>; i++) &#123;</div><div class="line">			Node nextNext = <span class="keyword">next</span>.getNext();</div><div class="line">			<span class="keyword">next</span>.setNext(temp);</div><div class="line">			temp = <span class="keyword">next</span>;</div><div class="line">			<span class="keyword">next</span> = nextNext;</div><div class="line">		&#125;</div><div class="line">		last.setNext(<span class="keyword">null</span>);</div><div class="line">		first = temp;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LinkTest</span> &#123;</span></div><div class="line">	public static void main(<span class="type">String</span>[] args) &#123;</div><div class="line">		<span class="type">Link</span> link = <span class="function"><span class="keyword">new</span> <span class="title">Link</span>();</span></div><div class="line">		<span class="title">link</span>.<span class="title">addFirst</span>(<span class="number">2</span>);</div><div class="line">		<span class="title">link</span>.<span class="title">addFirst</span>(<span class="number">1</span>);</div><div class="line">		<span class="title">link</span>.<span class="title">addLast</span>(<span class="number">4</span>);</div><div class="line">		<span class="title">link</span>.<span class="title">addLast</span>(<span class="number">5</span>);</div><div class="line">		<span class="title">link</span>.<span class="title">add</span>(<span class="number">3</span>, <span class="number">1</span>);<span class="comment">//下标为1的元素之后插入元素</span></div><div class="line">		<span class="title">printAllElements</span>(link);<span class="comment">//1、2、3、4、5</span></div><div class="line">		</div><div class="line">		<span class="title">link</span>.<span class="title">reverse</span>();</div><div class="line">		<span class="title">printAllElements</span>(link);<span class="comment">//5、4、3、2、1</span></div><div class="line">		</div><div class="line">		<span class="title">link</span>.<span class="title">printAll</span>();<span class="comment">//这样打印效率更高</span></div><div class="line">		<span class="title">link</span>.<span class="title">removeFirst</span>();</div><div class="line">		<span class="title">link</span>.<span class="title">removeLast</span>();</div><div class="line">		<span class="title">link</span>.<span class="title">removeMiddle</span>(<span class="number">1</span>);</div><div class="line">		<span class="title">printAllElements</span>(link);<span class="comment">//去除了头尾之后，剩下3个元素，去除下标为1的元素，只剩下4、2</span></div><div class="line">		<span class="title">link</span>.<span class="title">removeFirst</span>();</div><div class="line">		<span class="title">link</span>.<span class="title">removeFirst</span>();</div><div class="line">		<span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(link.size());<span class="comment">//从头部全部移除，链表为空</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="title">private</span> <span class="title">static</span> <span class="title">void</span> <span class="title">printAllElements</span>(<span class="type">Link</span> link) &#123;</div><div class="line">		<span class="title">for</span> (int i = <span class="number">0</span>; i &lt; link.size(); <span class="title">i</span>++) &#123;</div><div class="line">			<span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(link.getIndex(i).<span class="title">getData</span>());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###链表的性能分析</p>
<p>链表的插入分为三种：头插法、尾插法、中间插。头部，尾部可以直接插入，时间复杂度为O（1）；中间插入需要遍历链表，时间复杂度为O（L），L为链表长度。链表的删除也类似。</p>
<p>链表的头插和头删都是O（1）的时间复杂度，这和栈很像，所以可以用单向链表实现。</p>
<hr>
<p>哦，还有静态链表。一般来说，静态链表就是使用一段固定长度的数组，其中的每个元素由data（用于记录数据）和cur（指向下一节点）。下面，用代码实现一下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Element</span> &#123;</div><div class="line">		</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> data;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> cur;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> data;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span>(<span class="params"><span class="keyword">int</span> data</span>) </span>&#123;</div><div class="line">		<span class="keyword">this</span>.data = data;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCur</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> cur;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCur</span>(<span class="params"><span class="keyword">int</span> cur</span>) </span>&#123;</div><div class="line">		<span class="keyword">this</span>.cur = cur;</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> StaticLinkedList &#123;</div><div class="line"></div><div class="line">	</div><div class="line">		<span class="keyword">private</span> Element[] elements;</div><div class="line">	</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> head;</div><div class="line">		</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> tail;</div><div class="line">		</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> unUsed;</div><div class="line">		</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> <span class="built_in">size</span>;</div><div class="line">		</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 初始化操作</div><div class="line">		 * @param capacity</div><div class="line">		 */</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> StaticLinkedList(<span class="keyword">int</span> capacity) &#123;</div><div class="line">			elements = <span class="keyword">new</span> Element[capacity]; </div><div class="line">			unUsed = <span class="number">0</span>;</div><div class="line">			<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; capacity - <span class="number">1</span>; i++) &#123;</div><div class="line">				elements[i] = <span class="keyword">new</span> Element();</div><div class="line">				elements[i].setCur(i + <span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">			elements[capacity - <span class="number">1</span> ] = <span class="keyword">new</span> Element();</div><div class="line">			elements[capacity - <span class="number">1</span> ].setCur(<span class="number">-1</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 在链表指定位置插入</div><div class="line">		 * @param data 要出入的值</div><div class="line">		 * @param index 链表位置（不是数组下标）</div><div class="line">		 */</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> insert(<span class="keyword">int</span> data, <span class="keyword">int</span> index) &#123;</div><div class="line">			<span class="built_in">if</span> (index == <span class="number">0</span>) &#123;</div><div class="line">				insertFirst(data);</div><div class="line">			&#125;<span class="built_in">else</span> <span class="built_in">if</span> (index == <span class="built_in">size</span>) &#123;</div><div class="line">				insertLast(data);</div><div class="line">			&#125;<span class="built_in">else</span> &#123;</div><div class="line">				checkFull();</div><div class="line">				<span class="comment">//获取要插入的元素的前一个元素</span></div><div class="line">				Element preElement = <span class="built_in">get</span>(index);</div><div class="line">				<span class="comment">//获取一个未使用的元素作为要插入的元素</span></div><div class="line">				Element unUsedElement = elements[unUsed];</div><div class="line">				<span class="comment">//记录要插入元素的下标</span></div><div class="line">				<span class="keyword">int</span> temp = unUsed;</div><div class="line">				<span class="comment">//将从备用链表中拿出来的元素的下一个元素的数组下标设为备用链表头</span></div><div class="line">				unUsed = unUsedElement.getCur();</div><div class="line">				<span class="comment">//将要插入元素的指针设为原本前一个元素的指针的下标值（链表插入操作）</span></div><div class="line">				unUsedElement.setCur(preElement.getCur());</div><div class="line">				<span class="comment">//将前一个元素的指针指向插入的元素下标</span></div><div class="line">				preElement.setCur(temp);</div><div class="line">				<span class="comment">//赋值</span></div><div class="line">				unUsedElement.setData(data);</div><div class="line">				<span class="comment">//链表长度加一</span></div><div class="line">				<span class="built_in">size</span> ++ ;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 链表前端插入</div><div class="line">		 * @param data</div><div class="line">		 */</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> insertFirst(<span class="keyword">int</span> data) &#123;</div><div class="line">			checkFull();</div><div class="line">			Element unUsedElement = elements[unUsed];</div><div class="line">			<span class="keyword">int</span> temp = unUsed;</div><div class="line">			unUsed = unUsedElement.getCur();</div><div class="line">			unUsedElement.setCur(head);</div><div class="line">			unUsedElement.setData(data);</div><div class="line">			head = temp;</div><div class="line">			<span class="built_in">size</span> ++ ;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 链表尾部插入</div><div class="line">		 * @param data</div><div class="line">		 */</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> insertLast(<span class="keyword">int</span> data) &#123;</div><div class="line">			checkFull();</div><div class="line">			Element unUsedElement = elements[unUsed];</div><div class="line">			<span class="keyword">int</span> temp = unUsed;</div><div class="line">			unUsed = unUsedElement.getCur();</div><div class="line">			elements[tail].setCur(temp);</div><div class="line">			unUsedElement.setData(data);</div><div class="line">			tail = temp;</div><div class="line">			<span class="built_in">size</span> ++ ;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 删除头元素</div><div class="line">		 */</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> deleteFirst() &#123;</div><div class="line">			checkFull();</div><div class="line">			Element deleteElement = elements[head];</div><div class="line">			<span class="keyword">int</span> temp = head;</div><div class="line">			head = deleteElement.getCur();</div><div class="line">			deleteElement.setCur(unUsed);</div><div class="line">			unUsed = temp;</div><div class="line">			<span class="built_in">size</span> -- ;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 删除尾元素</div><div class="line">		 */</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> deleteLast() &#123;</div><div class="line">			<span class="keyword">delete</span>(<span class="built_in">size</span> - <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 删除指定位置元素</div><div class="line">		 * @param index</div><div class="line">		 */</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">delete</span>(<span class="keyword">int</span> index) &#123;</div><div class="line">			<span class="built_in">if</span> (index == <span class="number">0</span>) &#123;</div><div class="line">				deleteFirst();</div><div class="line">			&#125;<span class="built_in">else</span> &#123;</div><div class="line">				checkEmpty();</div><div class="line">				Element pre = <span class="built_in">get</span>(index - <span class="number">1</span>);</div><div class="line">				<span class="keyword">int</span> del = pre.getCur();<span class="comment">//这是数组下标</span></div><div class="line">				Element deleteElement = elements[del];</div><div class="line">				pre.setCur(deleteElement.getCur());</div><div class="line">				<span class="built_in">if</span> (index == <span class="built_in">size</span> - <span class="number">1</span>) &#123;</div><div class="line">					tail = index <span class="number">-1</span>;</div><div class="line">				&#125;</div><div class="line">				deleteElement.setCur(unUsed);</div><div class="line">				unUsed = del;</div><div class="line">				<span class="built_in">size</span> -- ;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">void</span> checkEmpty() &#123;</div><div class="line">			<span class="built_in">if</span> (<span class="built_in">size</span> == <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"链表为空"</span>);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 获取链表元素</div><div class="line">		 * @param index 链表第几个元素（不是数组下标）</div><div class="line">		 * @return</div><div class="line">		 */</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> Element <span class="built_in">get</span>(<span class="keyword">int</span> index) &#123;</div><div class="line">			checkEmpty();</div><div class="line">			Element element = elements[head];</div><div class="line">			<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</div><div class="line">				element = elements[element.getCur()];</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">return</span> element;</div><div class="line">						</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> printAll() &#123;</div><div class="line">			Element element = elements[head];</div><div class="line">			System.out.<span class="built_in">println</span>(element.getData());</div><div class="line">			<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</div><div class="line">				element = elements[element.getCur()];</div><div class="line">				System.out.<span class="built_in">println</span>(element.getData());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">void</span> checkFull() &#123;</div><div class="line">			<span class="built_in">if</span> (<span class="built_in">size</span> == elements .length) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"数组不够长"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">public</span> <span class="keyword">int</span> <span class="built_in">size</span>() &#123;</div><div class="line">			<span class="built_in">return</span> <span class="built_in">size</span>;</div><div class="line">		&#125;		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">StaticLinkedListTest</span> &#123;</span></div><div class="line"></div><div class="line">	public static void main(<span class="type">String</span>[] args) &#123;</div><div class="line">		<span class="type">StaticLinkedList</span> link = <span class="function"><span class="keyword">new</span> <span class="title">StaticLinkedList</span>(<span class="number">10</span>);</span></div><div class="line">		<span class="title">link</span>.<span class="title">insertFirst</span>(<span class="number">2</span>);</div><div class="line">		<span class="title">link</span>.<span class="title">insertFirst</span>(<span class="number">1</span>);</div><div class="line">		<span class="title">link</span>.<span class="title">insertLast</span>(<span class="number">4</span>);</div><div class="line">		<span class="title">link</span>.<span class="title">insertLast</span>(<span class="number">5</span>);</div><div class="line">		<span class="title">link</span>.<span class="title">insert</span>(<span class="number">3</span>, <span class="number">1</span>);<span class="comment">//下标为1的元素之后插入元素</span></div><div class="line">		<span class="title">link</span>.<span class="title">printAll</span>();<span class="comment">//1、2、3、4、5</span></div><div class="line">		<span class="title">link</span>.<span class="title">deleteFirst</span>();</div><div class="line">		<span class="title">link</span>.<span class="title">deleteLast</span>();</div><div class="line">		<span class="title">link</span>.<span class="title">delete</span>(<span class="number">1</span>);</div><div class="line">		<span class="title">link</span>.<span class="title">printAll</span>();<span class="comment">//一出了头尾之后，剩下3个元素，一处下标为1的元素，只剩下2、4</span></div><div class="line">		<span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(link.get(<span class="number">1</span>).<span class="title">getData</span>());</div><div class="line">		<span class="title">link</span>.<span class="title">deleteFirst</span>();</div><div class="line">		<span class="title">link</span>.<span class="title">deleteFirst</span>();</div><div class="line">		<span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(link.size());<span class="comment">//从头部全部移除，链表为空</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/63850/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[笔记]算法复习笔记---栈、队列、链表（中）</title>
      <link>http://yoursite.com/posts/45409/</link>
      <guid>http://yoursite.com/posts/45409/</guid>
      <pubDate>Wed, 26 Apr 2017 12:21:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;一、用两个栈来实现队列&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法：&lt;/strong&gt;&lt;br&gt;入队都在Stack1中操作，出队都在Stack2中进行，入队和出队的规则如下：&lt;br&gt;入队：直接把元素压入Stack1中。&lt;br&gt;出队：如果Stack2不为空，直接弹出stack2的元素，
      
      </description>
      
      <content:encoded><![CDATA[<p>一、用两个栈来实现队列</p>
<p><strong>方法：</strong><br>入队都在Stack1中操作，出队都在Stack2中进行，入队和出队的规则如下：<br>入队：直接把元素压入Stack1中。<br>出队：如果Stack2不为空，直接弹出stack2的元素，如果stack2为空，将stack1中所有元素倒入stack2，然后弹出stack2栈顶元素。如果两个队列都空，队列为空队，无法出栈。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Stack2Queue &#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Stack stack1; </div><div class="line">	<span class="keyword">private</span> Stack stack2; </div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> maxLength;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Stack2Queue( <span class="keyword">int</span> capacity) &#123;</div><div class="line">		maxLength = capacity;</div><div class="line">		stack1 = <span class="keyword">new</span> Stack(capacity);</div><div class="line">		stack2 = <span class="keyword">new</span> Stack(capacity);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> put(<span class="keyword">int</span> item) &#123;</div><div class="line">		<span class="keyword">if</span> (stack1.isFull() || maxLength == <span class="keyword">size</span>()) &#123;</div><div class="line">			<span class="comment">//满了</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		stack1.<span class="keyword">push</span>(item);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>  poll() &#123;</div><div class="line">		<span class="keyword">if</span> (!stack2.isEmpty()) &#123;</div><div class="line">			<span class="keyword">return</span> stack2.<span class="keyword">pop</span>();</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">while</span> (!stack1.isEmpty()) &#123;</div><div class="line">				stack2.<span class="keyword">push</span>(stack1.<span class="keyword">pop</span>());</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> stack2.<span class="keyword">pop</span>();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">size</span>() &#123;</div><div class="line">		<span class="keyword">return</span> stack1.<span class="keyword">size</span>() + stack2.<span class="keyword">size</span>();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Stack2QueueTest &#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Stack2Queue <span class="built_in">queue</span> = <span class="keyword">new</span> Stack2Queue(<span class="number">5</span>);</div><div class="line">		<span class="built_in">queue</span>.put(<span class="number">1</span>);</div><div class="line">		<span class="built_in">queue</span>.put(<span class="number">2</span>);</div><div class="line">		System.out.println(<span class="built_in">queue</span>.poll());<span class="comment">//1</span></div><div class="line">		<span class="built_in">queue</span>.put(<span class="number">3</span>);</div><div class="line">		<span class="built_in">queue</span>.put(<span class="number">4</span>);</div><div class="line">		System.out.println(<span class="built_in">queue</span>.poll());<span class="comment">//2</span></div><div class="line">		System.out.println(<span class="built_in">queue</span>.poll());<span class="comment">//3,这次操作中，把3，4两个元素从stack1倒入stack2</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##二、两个队列实现栈</p>
<p><strong>方案：</strong></p>
<ul>
<li>入栈：两个队列那个不为空，就把元素入队到那个队列中；如果都为空，则任选一个入队，假设这个队列为queue1</li>
<li><p>出栈：把不为空的队列去除最后一个元素外的所有元素移动到另一个队列中，然后出队最后一个元素。</p>
<p><strong>下面是实现代码：</strong></p>
</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Queue2Stack &#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> ArrayQueue queue1;</div><div class="line">	<span class="keyword">private</span> ArrayQueue queue2;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> maxLength;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Queue2Stack(<span class="keyword">int</span> capacity) &#123;</div><div class="line">		maxLength = capacity;</div><div class="line">		queue1 = <span class="keyword">new</span> ArrayQueue(capacity);</div><div class="line">		queue2 = <span class="keyword">new</span> ArrayQueue(capacity);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 入栈</div><div class="line">	 * @param item</div><div class="line">	 * @return 入栈结果</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="keyword">push</span>(<span class="keyword">int</span> item) &#123;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">size</span>() == maxLength) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (queue2.isEmpty()) &#123;</div><div class="line">			queue1.put(item);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			queue2.put(item);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Object <span class="keyword">pop</span>() &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">size</span>() == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"栈里空了"</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">if</span> (queue2.isEmpty()) &#123;</div><div class="line">				<span class="keyword">while</span> (queue1.<span class="keyword">Size</span>() &gt; <span class="number">1</span>) &#123;</div><div class="line">					queue2.put(queue1.poll());</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> queue1.poll();</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">while</span> (queue2.<span class="keyword">Size</span>() &gt; <span class="number">1</span>) &#123;</div><div class="line">					queue1.put(queue2.poll());</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> queue2.poll();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">size</span>() &#123;</div><div class="line">		<span class="keyword">return</span> queue1.<span class="keyword">Size</span>() + queue2.<span class="keyword">Size</span>();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Queue2StackTest &#123;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">		Queue2Stack stack = <span class="keyword">new</span> Queue2Stack(<span class="number">5</span>);</div><div class="line">		stack.<span class="keyword">push</span>(<span class="number">1</span>);</div><div class="line">		stack.<span class="keyword">push</span>(<span class="number">2</span>);</div><div class="line">		System.out.<span class="keyword">println</span>(stack.<span class="keyword">pop</span>());<span class="comment">//2</span></div><div class="line">		</div><div class="line">		stack.<span class="keyword">push</span>(<span class="number">3</span>);</div><div class="line">		stack.<span class="keyword">push</span>(<span class="number">4</span>);</div><div class="line">		System.out.<span class="keyword">println</span>(stack.<span class="keyword">pop</span>());<span class="comment">//4</span></div><div class="line">		System.out.<span class="keyword">println</span>(stack.<span class="keyword">pop</span>());<span class="comment">//3</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/45409/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[笔记]算法复习笔记---栈、队列、链表（上）</title>
      <link>http://yoursite.com/posts/1387/</link>
      <guid>http://yoursite.com/posts/1387/</guid>
      <pubDate>Wed, 26 Apr 2017 12:20:55 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;一、什么是栈&quot;&gt;&lt;a href=&quot;#一、什么是栈&quot; class=&quot;headerlink&quot; title=&quot;一、什么是栈&quot;&gt;&lt;/a&gt;一、什么是栈&lt;/h2&gt;&lt;p&gt;栈，又叫做堆栈（Stack），但是它和堆没有关系。实际上堆和栈是两种不同的概念，栈是一种只能在一端进行插入和
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="一、什么是栈"><a href="#一、什么是栈" class="headerlink" title="一、什么是栈"></a>一、什么是栈</h2><p>栈，又叫做堆栈（Stack），但是它和堆没有关系。实际上堆和栈是两种不同的概念，栈是一种只能在一端进行插入和删除的线性数据结构。</p>
<p>栈的特点：先进先出（LIFO，Last In First Out），也可以说是先进后出（FILO，First In Last Out），我们只能从一端去操作元素。</p>
<p>一般来说，栈主要有两种操作：一个是进栈（Push），又叫做入栈，压栈；另一个是出栈（POP），或者叫退栈。</p>
<p><strong>我们可以用数组去实现一个简单的栈，在下面栈的实现代码中，以整型元素为例，在Java等高级语言中，数据类型中，可以换成对象。</strong></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Stack &#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] <span class="keyword">array</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Stack() &#123;</div><div class="line">		<span class="keyword">this</span>(<span class="number">10</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> Stack(<span class="keyword">int</span> init) &#123;</div><div class="line">		</div><div class="line">		<span class="built_in">if</span> (init &lt;= <span class="number">0</span>) &#123;</div><div class="line">			init = <span class="number">10</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[init];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 入栈</div><div class="line">	 * @param item 入栈元素</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> push(<span class="keyword">int</span> item) &#123;</div><div class="line">		</div><div class="line">		<span class="built_in">if</span> (<span class="built_in">size</span> == <span class="keyword">array</span>.length) &#123;</div><div class="line">			<span class="keyword">array</span> = Arrays.copyOf(<span class="keyword">array</span>, <span class="built_in">size</span>*<span class="number">2</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">array</span>[<span class="built_in">size</span>++] = item;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取栈顶元素，但是没有出栈</div><div class="line">	 * @return 栈顶元素</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="built_in">peek</span>() &#123;</div><div class="line">		</div><div class="line">		<span class="built_in">if</span> (<span class="built_in">size</span> ==<span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"栈里已经为空"</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="built_in">return</span> <span class="keyword">array</span>[<span class="built_in">size</span> <span class="number">-1</span>];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 出栈，同时获取栈顶元素</div><div class="line">	 * @return 栈顶元素</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> pop() &#123;</div><div class="line">		<span class="keyword">int</span> item = <span class="built_in">peek</span>();</div><div class="line">		<span class="built_in">size</span> --;</div><div class="line">		<span class="built_in">return</span> item;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 栈是否满了？</div><div class="line">	 * @return </div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> isFull() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="built_in">size</span> == <span class="keyword">array</span>.length;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *栈是否为空栈 ？ </div><div class="line">	 * @return</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> isEmpty() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="built_in">size</span> ==<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="built_in">size</span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="built_in">size</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> StackTest &#123;</div><div class="line">		</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</div><div class="line">		</div><div class="line">		Stack stack = <span class="keyword">new</span> Stack(<span class="number">1</span>);</div><div class="line">		stack.<span class="keyword">push</span>(<span class="number">1</span>);</div><div class="line">		stack.<span class="keyword">push</span>(<span class="number">2</span>);</div><div class="line">		System.out.<span class="keyword">println</span>(stack.<span class="keyword">size</span>());<span class="comment">//栈内元素个数为2，当前数组长度也为2</span></div><div class="line">		</div><div class="line">		stack.<span class="keyword">push</span>(<span class="number">3</span>);</div><div class="line">		System.out.<span class="keyword">println</span>(stack.<span class="keyword">size</span>());<span class="comment">//栈内元素个数为3，当前数组长度为4</span></div><div class="line">		System.out.<span class="keyword">println</span>(stack.peek());<span class="comment">//获取栈顶元素为3，但没有出栈</span></div><div class="line">		System.out.<span class="keyword">println</span>(stack.<span class="keyword">size</span>());<span class="comment">//元素个数还为3</span></div><div class="line">		</div><div class="line">		System.out.<span class="keyword">println</span>(stack.<span class="keyword">pop</span>());<span class="comment">//栈顶元素出栈，返回3</span></div><div class="line">		System.out.<span class="keyword">println</span>(stack.<span class="keyword">pop</span>());<span class="comment">//栈顶元素出栈，返回2</span></div><div class="line">		System.out.<span class="keyword">println</span>(stack.<span class="keyword">size</span>());<span class="comment">//两次出栈之后，当前元素个数为1</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###栈的适用场景</p>
<ol>
<li>逆序输出</li>
</ol>
<p>由于栈有先进先出的特点，把元素顺序入栈，然后顺序出栈，就可以轻松得到逆序输出。</p>
<ol>
<li>语法检查，符号成对出现</li>
</ol>
<p>在编程语言中，{  } [  ] (   ) &lt; &gt; 等都是成对出现的，当遇到符号的前半部分，就进行入栈操作（PUSH），当遇到后半部分就与栈顶元素匹配（PEEK），如果相匹配，就出栈（POP），否则匹配出错。</p>
<ol>
<li>数值转换</li>
</ol>
<p>我们在进行数值转换时，最后的商需要逆序输出，用栈就可以简单的实现。当然，栈还有许多应用，比如经常听到的“函数栈”就是我们在调用方法时，计算机会执行PUSH方法，记录调用，在return的时候。就是在方法结束后，执行POP方法，完成前后对应。</p>
<h2 id="二、什么是队列"><a href="#二、什么是队列" class="headerlink" title="二、什么是队列"></a>二、什么是队列</h2><p>队列也是一种操作受限的数据结构，插入操作只能从一端进行，这个叫队尾，移除操作只能从另一端操作，这个叫队头。</p>
<p>一般来说，队列的实现方式有两种，数组和链表。数组来实现有两种方式：顺序队列和循环队列。用数组实现队列，若出现队满的情况，当有新的元素需要入队的时候，可是没有位置，这时候，要么丢掉，不管它，要么等待，等待时间由程序来控制。</p>
<p><strong>实现顺序队列：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Object[] items;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> head = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> tail = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 初始化队列</div><div class="line">	 * <span class="doctag">@param</span> capacity 队列长度</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.items = <span class="keyword">new</span> Object[capacity];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 入队</div><div class="line">	 * <span class="doctag">@param</span> item</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">put</span><span class="params">(Object item)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (head == ((tail + <span class="number">1</span>) % items.length)) &#123;</div><div class="line">			<span class="comment">//说明队满</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		items[tail] = item;</div><div class="line">		tail = (tail + <span class="number">1</span>) % items.length; <span class="comment">//tail标记后移一位</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取队列头元素，不出队</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (head == tail) &#123;</div><div class="line">			<span class="comment">//s说明对空</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> items[head];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 出队</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">poll</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (head == tail) &#123;</div><div class="line">			<span class="comment">//说明队空</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		Object item = items[head];</div><div class="line">		items[head] = <span class="keyword">null</span>;<span class="comment">//没用的元素赋空值，当然不设置也可以，反正标记移动之后会被覆盖</span></div><div class="line">		head = (head +<span class="number">1</span> ) % items.length;<span class="comment">//head标记后移一位</span></div><div class="line">		<span class="keyword">return</span> item;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> head == (tail + <span class="number">1</span>) % items.length;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> head == tail;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span>  <span class="title">Size</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (tail &gt;= head) &#123;</div><div class="line">			<span class="keyword">return</span> tail - head;</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> tail + items.length - head;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> ArrayQueueTest &#123;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		</div><div class="line">		</div><div class="line">		ArrayQueue queue = <span class="keyword">new</span> ArrayQueue(<span class="number">4</span>);</div><div class="line">		System.out.<span class="built_in">println</span>(queue.<span class="built_in">put</span>(<span class="string">"A"</span>));<span class="comment">//true</span></div><div class="line">		System.out.<span class="built_in">println</span>(queue.<span class="built_in">put</span>(<span class="string">"B"</span>));<span class="comment">//true</span></div><div class="line">		System.out.<span class="built_in">println</span>(queue.<span class="built_in">put</span>(<span class="string">"C"</span>));<span class="comment">//true</span></div><div class="line">		System.out.<span class="built_in">println</span>(queue.<span class="built_in">put</span>(<span class="string">"D"</span>));<span class="comment">//false</span></div><div class="line">		</div><div class="line">		System.out.<span class="built_in">println</span>(queue.isFull());<span class="comment">//true,队列已经满了，队列长度为4，因为是循环队列，最大存3个元素</span></div><div class="line">		</div><div class="line">		System.out.<span class="built_in">println</span>(queue.Size());<span class="comment">//3</span></div><div class="line">		</div><div class="line">		System.out.<span class="built_in">println</span>(queue.<span class="built_in">peek</span>());<span class="comment">//A 获取队头元素，不出队</span></div><div class="line">		System.out.<span class="built_in">println</span>(queue.poll());<span class="comment">//A</span></div><div class="line">		System.out.<span class="built_in">println</span>(queue.poll());<span class="comment">//B</span></div><div class="line">		System.out.<span class="built_in">println</span>(queue.poll());<span class="comment">//C</span></div><div class="line">		</div><div class="line">		System.out.<span class="built_in">println</span>(queue.isEmpty());<span class="comment">//true ,当前队列为空</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###队列的适用场景：</p>
<ol>
<li><p>买东西，秒杀</p>
<p> 我们很容易想到这个场景，从网购秒杀商品，到排队买早餐。先进先出，先来先走</p>
</li>
<li><p>生产者和消费者模式</p>
<p>还记得生产者和消费者模式吗? 生产者负责生产，生产之后放到传送带，消费者拿下来，这个模式实现起来，无非就是存在一个队列，若干个生产者向队列增加元素，若干个消费者从队列中获取元素。</p>
</li>
</ol>
]]></content:encoded>
      
      <comments>http://yoursite.com/posts/1387/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[笔记]算法复习笔记---数组、集合、散列表（下）</title>
      <link>http://yoursite.com/posts/30388/</link>
      <guid>http://yoursite.com/posts/30388/</guid>
      <pubDate>Wed, 26 Apr 2017 12:19:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;散列表是一种空间换时间的数据结构，在算法中提升效率的一种常用的方法。但是，正如其特点，有时候所消耗的空间，真让人头疼，用的时候在二者之间权衡。&lt;/p&gt;
&lt;p&gt;散列表，又叫哈希表（HashTable），是能够通过给定的关键字的值直接访问到具体对应值的数据结构。也就是说，把关键
      
      </description>
      
      <content:encoded><![CDATA[<p>散列表是一种空间换时间的数据结构，在算法中提升效率的一种常用的方法。但是，正如其特点，有时候所消耗的空间，真让人头疼，用的时候在二者之间权衡。</p>
<p>散列表，又叫哈希表（HashTable），是能够通过给定的关键字的值直接访问到具体对应值的数据结构。也就是说，把关键字映到一个表中的位置来直接访问记录，以加快访问速度。</p>
<p>通常，我们通过Key来找Value，也就是说，通过Key访问一个映射表来得到Value的地址。而这个映射表，也叫作散列函数或者哈希函数，存放记录的数组叫做散列表。</p>
<p>如果可以通过不同的Key访问到同一个Value，那么就发生了碰撞，我们需要的是通过一个Key可以访问到唯一的Value。</p>
<p><strong>常用的处理冲突的方法有：</strong></p>
<ol>
<li><p>开放地址法（开放寻址法）</p>
<p>就是当这个key通过哈希函数找到存放value地址的位置，当这个位置已经存放数据，就存在其紧跟着后面没有占用的位置，如果超过了最大长度，对最大长度取余，这里移动的地址是产生冲突的偏移量。</p>
</li>
<li><p>再哈希法</p>
<p>产生冲突后，用关键字其他部分继续计算地址，直到不产生冲突，当这种方法增加了时间。</p>
</li>
<li><p>链地址法</p>
<p>当产生冲突，把处于同一地址的数据做成一个链表，这种方法最常见。</p>
</li>
<li><p>建立公共溢出区</p>
<p>建立一个公共溢出区，把产生冲突的新地址放在这个公共溢出区里。</p>
</li>
</ol>
<p>###散列表的特点：</p>
<ol>
<li><p>访问速度快</p>
<p> 由于散列表有散列函数，把Key映射到一个地址上，访问key对映的Value时候，不需要查找，直接跳到那个地址，因此，散列表的增删改查等任何操作，速度都比较快。</p>
</li>
<li><p>需要额外的空间</p>
<p>当发生冲突，需要额外的空间去存储，空间换时间，有舍才有得。</p>
</li>
<li><p>无序</p>
<p> 为了快速找到访问的元素，根据散列函数直接找到存储地址，访问速度就快起来，但是有序访问没有办法实现。</p>
</li>
<li><p>可能产生碰撞</p>
</li>
</ol>
<p>没有完美的散列函数，无论如何总会产生冲突，采用冲突的处理办法，就会使散列表变得更加复杂。</p>
<hr>
<p>下面展示如何实现一个散列表，这里用数组代替散列表元素（在在真实情况下，大多数语言的实现中，大多数元素都是一个特别的数组，每个元素对应一个地址），每个数组元素作为一个地址。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Entry</span> &#123;</div><div class="line"> </div><div class="line">		<span class="keyword">int</span> key;</div><div class="line">		<span class="keyword">int</span> <span class="keyword">value</span>;</div><div class="line">		Entry  next;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Entry</span>(<span class="params"><span class="keyword">int</span> key, <span class="keyword">int</span> <span class="keyword">value</span>, Entry next</span>) </span>&#123;</div><div class="line">			super();</div><div class="line">			<span class="keyword">this</span>.key = key;</div><div class="line">			<span class="keyword">this</span>.<span class="keyword">value</span> = <span class="keyword">value</span>;</div><div class="line">			<span class="keyword">this</span>.next = next;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> HashTable &#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 默认散列表的初始长度</div><div class="line">	 * 设置小一点，这样扩容的时候看的清楚</div><div class="line">	 * 在实际使用中其实可以在初始化传参数，因为扩容是很消耗性能的</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">4</span>;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 扩容因子</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> LOAD_FACTOR = <span class="number">0.75</span>f;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 散列表数组</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> Entry[] table = <span class="keyword">new</span> Entry[DEFAULT_INITIAL_CAPACITY];</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">size</span> = <span class="number">0</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> use = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> put(<span class="keyword">int</span> key, <span class="keyword">int</span> value) &#123;</div><div class="line">		<span class="keyword">int</span> index = hash(key);</div><div class="line">		<span class="keyword">if</span> (table[index] == <span class="keyword">null</span>) &#123;</div><div class="line">			table[index] = <span class="keyword">new</span> Entry(-<span class="number">1</span>, -<span class="number">1</span>, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">		Entry e = table[index];</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (e.<span class="keyword">next</span> == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">//不存在的值，向链表中添加，有可能扩容，要用table属性</span></div><div class="line">			table[index].<span class="keyword">next</span> = <span class="keyword">new</span> Entry(key, value, <span class="keyword">null</span>);</div><div class="line">			<span class="keyword">size</span>++;</div><div class="line">			use++;</div><div class="line">			<span class="comment">//不存在的值，说明是个未用过的地址，需要判断是否扩容</span></div><div class="line">			<span class="keyword">if</span> (use &gt;= table.length * LOAD_FACTOR) &#123;</div><div class="line">				resize();</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			</div><div class="line">			<span class="comment">//本身存在的值，修改已有的值</span></div><div class="line">			<span class="keyword">for</span> (e = e.<span class="keyword">next</span>; e != <span class="keyword">null</span>; e =e.<span class="keyword">next</span>) &#123;</div><div class="line">				<span class="keyword">int</span> k = e.key;</div><div class="line">				<span class="keyword">if</span> (k == key) &#123;</div><div class="line">					e.value = value;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//不存在相同的值，直接向链表中添加元素</span></div><div class="line">			Entry temp = table[index].<span class="keyword">next</span>;</div><div class="line">			Entry newEntry = <span class="keyword">new</span> Entry(key, value, temp);</div><div class="line">			table[index].<span class="keyword">next</span> = newEntry;</div><div class="line">			<span class="keyword">size</span> ++;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除</div><div class="line">	 * @param key</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> remove( <span class="keyword">int</span> key) &#123;</div><div class="line">		<span class="keyword">int</span> index = hash(key);</div><div class="line">		Entry e = table[index];</div><div class="line">		Entry pre = table[index];</div><div class="line">		<span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.<span class="keyword">next</span> !=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span>(e = e.<span class="keyword">next</span> ; e != <span class="keyword">null</span>; pre = e, e = e.<span class="keyword">next</span>)&#123;</div><div class="line">				<span class="keyword">int</span> k = e.key;</div><div class="line">				<span class="keyword">if</span> (k == key) &#123;</div><div class="line">					pre.<span class="keyword">next</span> = e.<span class="keyword">next</span>;</div><div class="line">					<span class="keyword">size</span> --;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> get(<span class="keyword">int</span> key) &#123;</div><div class="line">		<span class="keyword">int</span> index = hash(key);</div><div class="line">		Entry e = table[index];</div><div class="line">		<span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; table.length; i++) &#123;</div><div class="line">				<span class="keyword">for</span> (e = e.<span class="keyword">next</span>; e != <span class="keyword">null</span>; e =e.<span class="keyword">next</span>) &#123;</div><div class="line">					<span class="keyword">int</span> k = e.key;</div><div class="line">					<span class="keyword">if</span> (k == key) &#123;</div><div class="line">						<span class="keyword">return</span> e.value;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取散列表中元素的个数</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="keyword">size</span>() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">size</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 本身散列表是不该有这个方法的，在这里只是为了清楚地看到确实扩容了。</div><div class="line">	 * @return</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> getLength() &#123;</div><div class="line">		<span class="keyword">return</span> table.length;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 根据key，通过哈希函数获取位于散列表数组中的哪个位置</div><div class="line">	 * @param key</div><div class="line">	 * @return</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span>  hash(<span class="keyword">int</span> key) &#123;</div><div class="line">		<span class="keyword">return</span> key % table.length;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 扩容</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> resize() &#123;</div><div class="line">		<span class="keyword">int</span> newLength = table.length * <span class="number">2</span>;</div><div class="line">		Entry[] oldTable = table;</div><div class="line">		table = <span class="keyword">new</span> Entry[newLength];</div><div class="line">		use =<span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldTable.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span> (oldTable[i] != <span class="keyword">null</span> &amp;&amp; oldTable[i].<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</div><div class="line">				Entry entry = oldTable[i];</div><div class="line">				<span class="keyword">while</span> (<span class="keyword">null</span> != entry.<span class="keyword">next</span>) &#123;</div><div class="line">					Entry <span class="keyword">next</span> = entry.<span class="keyword">next</span>;</div><div class="line">					<span class="comment">//重新计算哈希值，放入新的地址</span></div><div class="line">					<span class="keyword">int</span> index = hash(<span class="keyword">next</span>.key);</div><div class="line">					<span class="keyword">if</span> (table[index] == <span class="keyword">null</span>) &#123;</div><div class="line">						use ++;</div><div class="line">						table[index] = <span class="keyword">new</span> Entry(-<span class="number">1</span>, -<span class="number">1</span>, <span class="keyword">null</span>);</div><div class="line">					&#125;					</div><div class="line">					table[index].<span class="keyword">next</span> = <span class="keyword">new</span> Entry(<span class="keyword">next</span>.key, <span class="keyword">next</span>.value, table[index].<span class="keyword">next</span>);</div><div class="line">					<span class="comment">//可以用下面三行代替</span></div><div class="line"><span class="comment">//					Entry temp = table[index].next;</span></div><div class="line"><span class="comment">//					Entry newEntry = new Entry(next.key, next.value, temp);</span></div><div class="line"><span class="comment">//					table[index].next = newEntry;</span></div><div class="line">					</div><div class="line">					entry = <span class="keyword">next</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;	</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> HashTableTest &#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		HashTable hashTable = <span class="keyword">new</span> HashTable();</div><div class="line">		hashTable.<span class="built_in">put</span>(<span class="number">1</span>, <span class="number">10</span>);</div><div class="line">		hashTable.<span class="built_in">put</span>(<span class="number">2</span>, <span class="number">20</span>);</div><div class="line">		hashTable.<span class="built_in">put</span>(<span class="number">5</span>, <span class="number">50</span>);<span class="comment">//和key为1的元素落在一个散列地址上了，实际使用长度为2</span></div><div class="line">		</div><div class="line">		System.out.<span class="built_in">println</span>(hashTable.getLength());<span class="comment">//散列表长度为4</span></div><div class="line">		hashTable.<span class="built_in">put</span>(<span class="number">3</span>, <span class="number">30</span>);<span class="comment">//总长度为4，加上该元素后长度就 大于等于3 了，所以扩容</span></div><div class="line">		System.out.<span class="built_in">println</span>(hashTable.getLength());<span class="comment">//散列表长为8</span></div><div class="line">		<span class="comment">//在扩容后4个元素又分别落在不同的地址上</span></div><div class="line">		hashTable.<span class="built_in">put</span>(<span class="number">6</span>, <span class="number">60</span>);<span class="comment">//使用第5 个地址</span></div><div class="line">		hashTable.<span class="built_in">put</span>(<span class="number">7</span>, <span class="number">70</span>);<span class="comment">//使用第6个地址，为8的0.75倍，又需要扩容</span></div><div class="line">		System.out.<span class="built_in">println</span>(hashTable.getLength());<span class="comment">//散列表长度为16</span></div><div class="line">		System.out.<span class="built_in">println</span>(hashTable.<span class="built_in">get</span>(<span class="number">1</span>));<span class="comment">//10</span></div><div class="line">		System.out.<span class="built_in">println</span>(hashTable.<span class="built_in">get</span>(<span class="number">3</span>));<span class="comment">//30</span></div><div class="line">		System.out.<span class="built_in">println</span>(hashTable.<span class="built_in">get</span>(<span class="number">5</span>));<span class="comment">//50</span></div><div class="line">		System.out.<span class="built_in">println</span>(hashTable.<span class="built_in">get</span>(<span class="number">6</span>));<span class="comment">//60</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/30388/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[笔记]算法复习笔记---数组、集合、散列表（上）</title>
      <link>http://yoursite.com/posts/35509/</link>
      <guid>http://yoursite.com/posts/35509/</guid>
      <pubDate>Wed, 26 Apr 2017 12:18:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;数组是数据结构中最基础的存储方式之一，集合是数组的延伸，散列表，又称哈希表（Hash Table），许多高级语言中都是在数组的基础上实现的，当然还有其他实现形式。&lt;/p&gt;
&lt;h2 id=&quot;一、数组的特点：&quot;&gt;&lt;a href=&quot;#一、数组的特点：&quot; class=&quot;header
      
      </description>
      
      <content:encoded><![CDATA[<p>数组是数据结构中最基础的存储方式之一，集合是数组的延伸，散列表，又称哈希表（Hash Table），许多高级语言中都是在数组的基础上实现的，当然还有其他实现形式。</p>
<h2 id="一、数组的特点："><a href="#一、数组的特点：" class="headerlink" title="一、数组的特点："></a>一、数组的特点：</h2><p>1、定长</p>
<p>数组的的长度是固定的，数组的长度在声明时候已经确定，在使用的时候发现不够用，只能重新声明一个数组</p>
<p>2、按照顺序访问</p>
<p>在访问数组中某一个元素的时候，只能从第一个元素按照顺序访问，知道访问到指定位置的元素。虽然在写程序时候可以通过下标直接访问指定位置的元素，但计算机实际上还是按照顺序访问的。</p>
<h2 id="二、升级版数组——集合"><a href="#二、升级版数组——集合" class="headerlink" title="二、升级版数组——集合"></a>二、升级版数组——集合</h2><p>数组的致命缺点就是长度固定，如果我们一开始不确定，就变得很麻烦了。有可能你会说，那就来个动态的呗，<strong>动态数组</strong>，在C语言中有一种实现动态数组的方式，就是用Malloc函数动态开辟内存空间， 但在这里我要说的是另一种方式，<strong>集合</strong>。</p>
<p><strong>什么是集合？</strong></p>
<p>我的理解就是长度可变的列表（动态数组）</p>
<p>下面这些都是集合：</p>
<ul>
<li><strong>列表</strong>：一般的有序集合，特点是没有顺序，比如链表、队列、栈。</li>
<li><strong>集</strong>：一般是无序的集合，特点就是没有顺序不能重复，多数语言都是散列表实现的，支持对集合进行添加、删除、查找等操作。</li>
<li><strong>多重集</strong>：一般是无序的集合，但是数据可以有重复的值，支持对集进行添加、删除、查找包含、查找一个元素 在集合中的个数等操作。多重集通过排序可以转换为列表。</li>
<li><strong>关联数组</strong>：多数语言也是用散列表实现的，就是可以通过键（key）获取到值（value）。也是没有顺序的</li>
<li><strong>树、图</strong>：树、图 同样是集合</li>
</ul>
<p>###那集合是怎么实现的呢？</p>
<p><strong>既然集合是长度可变的数组，那么我们就可以用数组实现集合。</strong></p>
<p>下面，用ArrayList实现简单的集合，也可以叫它变长数组。</p>
<p><img src="http://p1.bpimg.com/4851/999ed5535847eef8.jpg" alt="ArrayList插入数据的流程"></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> ArrayList &#123;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">int</span> INITIAL_SIZE = <span class="number">10</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] <span class="keyword">array</span>;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ArrayList() &#123;</div><div class="line">		</div><div class="line">		<span class="keyword">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[INITIAL_SIZE];</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">	<span class="keyword">public</span> ArrayList(<span class="keyword">int</span> initial)&#123;</div><div class="line">		</div><div class="line">		<span class="built_in">if</span> (initial &lt;= <span class="number">0</span>) &#123;</div><div class="line">			initial = INITIAL_SIZE;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[INITIAL_SIZE];</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 添加一个元素</div><div class="line">     * @param num</div><div class="line">     */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> add(<span class="keyword">int</span> num) &#123;</div><div class="line">		</div><div class="line">		<span class="built_in">if</span> (<span class="built_in">size</span> == <span class="keyword">array</span>.length) &#123;</div><div class="line">			<span class="keyword">array</span> = Arrays.copyOf(<span class="keyword">array</span>, <span class="built_in">size</span>*<span class="number">2</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">array</span>[<span class="built_in">size</span>++] = num;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取指定位置的元素值</div><div class="line">	 * @param i</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="built_in">get</span>(<span class="keyword">int</span> i) &#123;</div><div class="line">		</div><div class="line">		<span class="built_in">if</span> (i &gt;= <span class="built_in">size</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"获取的元素位置超过了最大长度"</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="built_in">return</span> <span class="keyword">array</span>[i];</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 设置指定位置的元素值</div><div class="line">	 * @param i</div><div class="line">	 * @param num</div><div class="line">	 * @return  指定的这个位置 之前的值</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> set(<span class="keyword">int</span> i,<span class="keyword">int</span> num) &#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> oldNum = <span class="built_in">get</span>(i);</div><div class="line">		<span class="keyword">array</span>[i] = num;</div><div class="line">		<span class="built_in">return</span> oldNum;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取变长数组的长度</div><div class="line">	 * @return</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="built_in">size</span>() &#123;</div><div class="line">		<span class="built_in">return</span> <span class="built_in">size</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ArrayListTest</span> &#123;</div><div class="line">		</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">		</div><div class="line">		ArrayList arrayList = <span class="keyword">new</span> ArrayList(<span class="number">1</span>);</div><div class="line">		arrayList.<span class="keyword">add</span>(<span class="number">1</span>);</div><div class="line">		arrayList.<span class="keyword">add</span>(<span class="number">2</span>);</div><div class="line">		arrayList.<span class="keyword">add</span>(<span class="number">3</span>);</div><div class="line">		arrayList.<span class="keyword">add</span>(<span class="number">4</span>);</div><div class="line">		arrayList.<span class="keyword">add</span>(<span class="number">5</span>);</div><div class="line">		</div><div class="line">		System.<span class="keyword">out</span>.println(arrayList.<span class="keyword">get</span>(<span class="number">3</span>));<span class="comment">//获取数组下标为3的值，也就是第4个位置的值，打印4</span></div><div class="line">		arrayList.<span class="keyword">set</span>(<span class="number">3</span>, <span class="number">9</span>);<span class="comment">//设置第4个位置的值为9</span></div><div class="line">		System.<span class="keyword">out</span>.println(arrayList.<span class="keyword">get</span>(<span class="number">3</span>));<span class="comment">//再次获取，这次打印9</span></div><div class="line">		System.<span class="keyword">out</span>.println(arrayList.size());<span class="comment">//变长数组的长度为5，实际上内部数组长度为8，在add（2）和add（5）时，分别进行了长度翻倍和数组复制</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###集合的特点：</p>
<ol>
<li>集合的特点，跟它的实现有关，那就是变长，变长是相对而言，内部还是通过数组实现的，只是在不够用的时候根据策略生成一个更长的数组，把旧数组复制到新数组里。</li>
<li>在正常情况下，会有两个系统开销，一个是数组总是比我们实际使用的长度长，因此存在空间浪费，另一个是数组不够长的时候，需要新建一个更长的数组，同时把旧数组的数据复制到新数组中，这个操作比较消耗系统的性能。<br>3.</li>
</ol>
<p>###数组与变长数组的性能</p>
<ul>
<li>虽然集合这个变长数组比普通数组更高级一些，但本质上还是基于数组实现的，所以和数组的性能差不多。</li>
<li>对数组的操作，并不是我们看到的那么直观，计算机需要根据我们的操作寻找指定位置，在数组中添加元素，修改元素，获取元素的时间复杂度都是O(n).</li>
<li>变长数组也有性能损耗的情况，在插入元素时发现其中固定数组的长度不够用，需要新建数组，复制数据，这个过程中会有性能损耗。</li>
</ul>
]]></content:encoded>
      
      <comments>http://yoursite.com/posts/35509/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
